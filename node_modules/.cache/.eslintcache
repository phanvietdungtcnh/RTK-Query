[{"C:\\Users\\Administrator\\Desktop\\Nodric\\finnal\\src\\index.js":"1","C:\\Users\\Administrator\\Desktop\\Nodric\\finnal\\src\\App.js":"2","C:\\Users\\Administrator\\Desktop\\Nodric\\finnal\\src\\app\\store.js":"3","C:\\Users\\Administrator\\Desktop\\Nodric\\finnal\\src\\api\\server.js":"4","C:\\Users\\Administrator\\Desktop\\Nodric\\finnal\\src\\app\\Navbar.js":"5","C:\\Users\\Administrator\\Desktop\\Nodric\\finnal\\src\\features\\users\\UserPage.js":"6","C:\\Users\\Administrator\\Desktop\\Nodric\\finnal\\src\\features\\posts\\EditPostForm.js":"7","C:\\Users\\Administrator\\Desktop\\Nodric\\finnal\\src\\features\\posts\\SinglePostPage.js":"8","C:\\Users\\Administrator\\Desktop\\Nodric\\finnal\\src\\features\\posts\\PostsList.js":"9","C:\\Users\\Administrator\\Desktop\\Nodric\\finnal\\src\\features\\users\\UsersList.js":"10","C:\\Users\\Administrator\\Desktop\\Nodric\\finnal\\src\\features\\albums\\AlbumsList.js":"11","C:\\Users\\Administrator\\Desktop\\Nodric\\finnal\\src\\features\\comments\\Comments.js":"12","C:\\Users\\Administrator\\Desktop\\Nodric\\finnal\\src\\features\\photos\\PhotoList.js":"13","C:\\Users\\Administrator\\Desktop\\Nodric\\finnal\\src\\features\\todos\\TodosList.js":"14","C:\\Users\\Administrator\\Desktop\\Nodric\\finnal\\src\\features\\api\\apiSlice.js":"15","C:\\Users\\Administrator\\Desktop\\Nodric\\finnal\\src\\features\\posts\\postsSlice.js":"16","C:\\Users\\Administrator\\Desktop\\Nodric\\finnal\\src\\features\\users\\usersSlice.js":"17","C:\\Users\\Administrator\\Desktop\\Nodric\\finnal\\src\\components\\Spinner.js":"18","C:\\Users\\Administrator\\Desktop\\Nodric\\finnal\\src\\api\\client.js":"19","C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\index.js":"20","C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\App.js":"21","C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\app\\store.js":"22","C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\api\\server.js":"23","C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\features\\users\\usersSlice.js":"24","C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\features\\api\\apiSlice.js":"25","C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\features\\users\\UserList.js":"26","C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\app\\Navbar.js":"27","C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\features\\users\\UserPage.js":"28","C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\features\\posts\\postsSlice.js":"29","C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\features\\posts\\PostsList.js":"30","C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\features\\album\\AlbumList.js":"31","C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\features\\todos\\TodosList.js":"32","C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\features\\photo\\SinglePhotoPage.js":"33","C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\features\\posts\\EditPostForm.js":"34","C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\features\\posts\\SinglePostPage.js":"35","C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\features\\photo\\PhotoList.js":"36","C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\features\\album\\SingleAlbumPage.js":"37","C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\features\\todos\\Single_TodosPage.js":"38","C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\api\\client.js":"39","C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\features\\posts\\TimeAgo.js":"40","C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\features\\posts\\PostAuthor.js":"41","C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\components\\Spinner.js":"42"},{"size":633,"mtime":1646634962433,"results":"43","hashOfConfig":"44"},{"size":1765,"mtime":1646376511289,"results":"45","hashOfConfig":"44"},{"size":306,"mtime":1646393975230,"results":"46","hashOfConfig":"44"},{"size":8032,"mtime":1646375338174,"results":"47","hashOfConfig":"44"},{"size":1674,"mtime":1646635406140,"results":"48","hashOfConfig":"44"},{"size":770,"mtime":1645448482938,"results":"49","hashOfConfig":"44"},{"size":1521,"mtime":1645448405777,"results":"50","hashOfConfig":"44"},{"size":3075,"mtime":1646735444353,"results":"51","hashOfConfig":"44"},{"size":1944,"mtime":1646735090287,"results":"52","hashOfConfig":"44"},{"size":1929,"mtime":1646301291489,"results":"53","hashOfConfig":"44"},{"size":1571,"mtime":1646301364093,"results":"54","hashOfConfig":"44"},{"size":1626,"mtime":1646319843172,"results":"55","hashOfConfig":"44"},{"size":1690,"mtime":1646301423511,"results":"56","hashOfConfig":"44"},{"size":1521,"mtime":1645971335101,"results":"57","hashOfConfig":"44"},{"size":2641,"mtime":1646373719721,"results":"58","hashOfConfig":"44"},{"size":2312,"mtime":1645767516428,"results":"59","hashOfConfig":"44"},{"size":794,"mtime":1645452876935,"results":"60","hashOfConfig":"44"},{"size":287,"mtime":1646375338178,"results":"61","hashOfConfig":"44"},{"size":1195,"mtime":1646375338173,"results":"62","hashOfConfig":"44"},{"size":848,"mtime":1647235613925,"results":"63","hashOfConfig":"64"},{"size":2088,"mtime":1647235613916,"results":"65","hashOfConfig":"64"},{"size":419,"mtime":1647235613917,"results":"66","hashOfConfig":"64"},{"size":8032,"mtime":1647235613917,"results":"67","hashOfConfig":"64"},{"size":897,"mtime":1647235613925,"results":"68","hashOfConfig":"64"},{"size":3444,"mtime":1647235613920,"results":"69","hashOfConfig":"64"},{"size":533,"mtime":1647235613924,"results":"70","hashOfConfig":"64"},{"size":630,"mtime":1647235613917,"results":"71","hashOfConfig":"64"},{"size":1846,"mtime":1647235613924,"results":"72","hashOfConfig":"64"},{"size":2824,"mtime":1647235613923,"results":"73","hashOfConfig":"64"},{"size":1693,"mtime":1647235613921,"results":"74","hashOfConfig":"64"},{"size":1430,"mtime":1647235613919,"results":"75","hashOfConfig":"64"},{"size":1471,"mtime":1647235613923,"results":"76","hashOfConfig":"64"},{"size":741,"mtime":1647235613920,"results":"77","hashOfConfig":"64"},{"size":1585,"mtime":1647235613921,"results":"78","hashOfConfig":"64"},{"size":1995,"mtime":1647235613922,"results":"79","hashOfConfig":"64"},{"size":1476,"mtime":1647235613920,"results":"80","hashOfConfig":"64"},{"size":1531,"mtime":1647235613919,"results":"81","hashOfConfig":"64"},{"size":749,"mtime":1647235613923,"results":"82","hashOfConfig":"64"},{"size":1195,"mtime":1647235613916,"results":"83","hashOfConfig":"64"},{"size":420,"mtime":1647235613922,"results":"84","hashOfConfig":"64"},{"size":326,"mtime":1647235613921,"results":"85","hashOfConfig":"64"},{"size":287,"mtime":1647235613918,"results":"86","hashOfConfig":"64"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"19tqept",{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},"4u1rt0",{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173"},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Administrator\\Desktop\\Nodric\\finnal\\src\\index.js",[],"C:\\Users\\Administrator\\Desktop\\Nodric\\finnal\\src\\App.js",[],"C:\\Users\\Administrator\\Desktop\\Nodric\\finnal\\src\\app\\store.js",[],"C:\\Users\\Administrator\\Desktop\\Nodric\\finnal\\src\\api\\server.js",[],"C:\\Users\\Administrator\\Desktop\\Nodric\\finnal\\src\\app\\Navbar.js",[],"C:\\Users\\Administrator\\Desktop\\Nodric\\finnal\\src\\features\\users\\UserPage.js",[],"C:\\Users\\Administrator\\Desktop\\Nodric\\finnal\\src\\features\\posts\\EditPostForm.js",[],"C:\\Users\\Administrator\\Desktop\\Nodric\\finnal\\src\\features\\posts\\SinglePostPage.js",["182"],"C:\\Users\\Administrator\\Desktop\\Nodric\\finnal\\src\\features\\posts\\PostsList.js",[],"C:\\Users\\Administrator\\Desktop\\Nodric\\finnal\\src\\features\\users\\UsersList.js",[],"C:\\Users\\Administrator\\Desktop\\Nodric\\finnal\\src\\features\\albums\\AlbumsList.js",[],"C:\\Users\\Administrator\\Desktop\\Nodric\\finnal\\src\\features\\comments\\Comments.js",[],"C:\\Users\\Administrator\\Desktop\\Nodric\\finnal\\src\\features\\photos\\PhotoList.js",[],"C:\\Users\\Administrator\\Desktop\\Nodric\\finnal\\src\\features\\todos\\TodosList.js",[],"C:\\Users\\Administrator\\Desktop\\Nodric\\finnal\\src\\features\\api\\apiSlice.js",[],"C:\\Users\\Administrator\\Desktop\\Nodric\\finnal\\src\\features\\posts\\postsSlice.js",[],"C:\\Users\\Administrator\\Desktop\\Nodric\\finnal\\src\\features\\users\\usersSlice.js",[],"C:\\Users\\Administrator\\Desktop\\Nodric\\finnal\\src\\components\\Spinner.js",[],"C:\\Users\\Administrator\\Desktop\\Nodric\\finnal\\src\\api\\client.js",[],"C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\index.js",["183","184"],"import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport store from './app/store'\r\nimport { Provider } from 'react-redux'\r\n\r\nimport { fetchUsers } from './features/users/usersSlice'\r\nimport { worker } from './api/server';\r\nimport { apiSlice } from './features/api/apiSlice'\r\nimport { extendedApiSlice } from './features/users/usersSlice'\r\n\r\n// Wrap app rendering so we can wait for the mock API to initialize\r\nasync function start() {\r\n  // Start our mock API server\r\n  await worker.start({ onUnhandledRequest: 'bypass' })\r\n  \r\n  store.dispatch(extendedApiSlice.endpoints.getUsers.initiate())\r\n\r\n  ReactDOM.render(\r\n    <React.StrictMode>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n  )\r\n}\r\n\r\nstart()\r\n","C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\App.js",[],"C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\app\\store.js",["185","186"],"import { configureStore } from '@reduxjs/toolkit';\r\nimport postsReducer from '../features/posts/postsSlice'\r\nimport usersReducer from '../features/users/usersSlice'\r\nimport { apiSlice } from '../features/api/apiSlice'\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    [apiSlice.reducerPath]: apiSlice.reducer\r\n  },\r\n  middleware: getDefaultMiddleware =>\r\n    getDefaultMiddleware().concat(apiSlice.middleware)\r\n})\r\n","C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\api\\server.js",[],"C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\features\\users\\usersSlice.js",[],"C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\features\\api\\apiSlice.js",[],"C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\features\\users\\UserList.js",[],"C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\app\\Navbar.js",["187","188"],"import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport const Navbar = () => {\r\n\r\n  return (\r\n    <nav>\r\n      <section className='NavContainer'>\r\n        <h1>Redux Toolkit Query</h1>\r\n\r\n        <div className=\"navContent\">\r\n          <div className=\"navLinks\">\r\n            <Link to=\"/\">Posts</Link>\r\n            <Link to=\"/users\">User</Link>\r\n            <Link to=\"/todos\">Todos</Link>\r\n            <Link to=\"/album\">Albums</Link>\r\n            <Link to=\"/photo\">Photos</Link>\r\n          </div>\r\n\r\n        </div>\r\n      </section>\r\n    </nav>\r\n  )\r\n}\r\n","C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\features\\users\\UserPage.js",["189","190"],"  import React, { useMemo } from 'react'\r\n  import { useSelector } from 'react-redux'\r\n  import { Link } from 'react-router-dom'\r\n  import { createSelector } from '@reduxjs/toolkit'\r\n\r\n  import { selectUserById } from '../users/usersSlice'\r\n  import { useGetPostsQuery } from '../api/apiSlice'\r\n\r\n  export const UserPage = ({ match }) => {\r\n      const { userId } = match.params\r\n\r\n      const user = useSelector(state => selectUserById(state, userId))\r\n\r\n\r\n      // const selectPostsForUser = useMemo(() => {\r\n      //   const emptyArray = []\r\n      //   // Return a unique selector instance for this page so that\r\n      //   // the filtered results are correctly memoized\r\n      //   return createSelector(\r\n      //     res => res.data,\r\n      //     (res, userId) => userId,\r\n      //     (data, userId) => data?.filter(post => post.user === userId) ?? emptyArray\r\n      //   )\r\n      // }, [])\r\n\r\n      const { data: listPosts } = useGetPostsQuery(undefined, {\r\n        selectFromResult: result => {\r\n          return ({\r\n            ...result,\r\n            // postsForUser: selectPostsForUser(result, Number(userId))\r\n          })\r\n        } \r\n      })\r\n\r\n      const postByUserId = useMemo(() => listPosts?.filter(({userId: postId}) => postId === Number(userId), [listPosts, userId]))\r\n\r\n      const postTitles = postByUserId?.map(post => (\r\n        <article key={post?.id} className=\"post-excerpt\">\r\n          <h3>{post.title}</h3>\r\n          <p className=\"post-content\">{post.body.substring(0, 100)}</p>\r\n          <Link to={`/posts/${post?.id}`} className=\"button muted-button\">\r\n            View Post\r\n          </Link>\r\n        </article>\r\n      ))\r\n\r\n      return (\r\n        <section>\r\n          <h2>Author Name: {user?.name}</h2>\r\n    \r\n          <div className=\"posts-container\">{postTitles}</div>\r\n        </section>\r\n      )\r\n  }","C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\features\\posts\\postsSlice.js",["191"],"import { createSlice, createSelector, createAsyncThunk, createEntityAdapter } from '@reduxjs/toolkit';\r\nimport { sub } from 'date-fns'\r\nimport { client } from '../../api/client'\r\n\r\n\r\nconst postsAdapter = createEntityAdapter({\r\n  sortComparer: (a, b) => b.date.localeCompare(a.date)\r\n})\r\n\r\nconst initialState = postsAdapter.getInitialState({\r\n  status: 'idle',\r\n  error: null\r\n})\r\n\r\nexport const fetchPosts = createAsyncThunk('https://jsonplaceholder.typicode.com/posts/fetchPosts', async () => {\r\n  const response = await client.get('https://jsonplaceholder.typicode.com/posts')\r\n  return response.data\r\n})\r\n\r\nexport const addNewPost = createAsyncThunk(\r\n  'posts/addNewPost',\r\n  // The payload creator receives the partial `{title, content, user}` object\r\n  async initialPost => {\r\n    // We send the initial data to the fake API server\r\n    const response = await client.post('https://jsonplaceholder.typicode.com/posts', initialPost)\r\n    // The response includes the complete post object, including unique ID\r\n    return response.data\r\n  }\r\n)\r\n\r\nconst postsSlice = createSlice({\r\n  name: 'posts',\r\n  initialState,\r\n  reducers: {\r\n    postUpdated(state, action) {\r\n      const { id, title, body } = action.payload\r\n      const existingPost = state.entities[id]\r\n      if (existingPost) {\r\n        existingPost.title = title\r\n        existingPost.body = body\r\n      }\r\n    },\r\n    reactionAdded(state, action) {\r\n      const { postId, reaction } = action.payload\r\n      const existingPost = state.entities[postId]\r\n      if (existingPost) {\r\n        existingPost.reactions[reaction]++\r\n      }\r\n    }\r\n  },\r\n  extraReducers(builder) {\r\n    builder\r\n      .addCase(fetchPosts.pending, (state, action) => {\r\n        state.status = 'loading'\r\n      })\r\n      .addCase(fetchPosts.fulfilled, (state, action) => {\r\n        state.status = 'succeeded'\r\n        // Add any fetched posts to the array\r\n        // Use the `upsertMany` reducer as a mutating update utility\r\n        postsAdapter.upsertMany(state, action.payload)\r\n      })\r\n      .addCase(fetchPosts.rejected, (state, action) => {\r\n        state.status = 'failed'\r\n        state.error = action.error.message\r\n      })\r\n      .addCase(addNewPost.fulfilled, postsAdapter.addOne)\r\n  }\r\n})\r\n\r\nexport const { postAdded, postUpdated, reactionAdded } = postsSlice.actions\r\n\r\nexport default postsSlice.reducer\r\n\r\n// Export the customized selectors for this adapter using `getSelectors`\r\nexport const {\r\n  selectAll: selectAllPosts,\r\n  selectById: selectPostById,\r\n  selectIds: selectPostIds\r\n  // Pass in a selector that returns the posts slice of state\r\n} = postsAdapter.getSelectors(state => state.posts)\r\n\r\nexport const selectPostsByUser = createSelector(\r\n  [selectAllPosts, (state, userId) => userId],\r\n  (posts, userId) => posts.filter(post => post.user === userId)\r\n)  ","C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\features\\posts\\PostsList.js",["192"],"import { Spinner } from '../../components/Spinner'\r\nimport React, { useMemo } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { PostAuthor } from './PostAuthor'\r\nimport { TimeAgo } from './TimeAgo'\r\n\r\nimport { useGetPostsQuery } from '../api/apiSlice'\r\n\r\nimport classnames from 'classnames'\r\n\r\nlet PostExcerpt = ({ post }) => {\r\n  return (\r\n    <article className=\"post-excerpt\" key={post.id}>\r\n      <h3>{post.title}</h3>\r\n      <div>\r\n        <PostAuthor userId={post.id} />\r\n        <TimeAgo timestamp={post.date} />\r\n      </div>\r\n      <p className=\"post-content\">{post.body.substring(0, 100)}</p>\r\n\r\n      <Link to={`/posts/${post.id}`} className=\"button muted-button\">\r\n        View Post\r\n      </Link>\r\n    </article>\r\n  )\r\n}\r\nPostExcerpt = React.memo(PostExcerpt)\r\n\r\nexport const PostsList = () => {\r\n\r\n  const {\r\n    data: posts = [],\r\n    isFetching,\r\n    isLoading,\r\n    isSuccess,\r\n    isError,\r\n    error,\r\n    refetch\r\n  } = useGetPostsQuery()\r\n\r\n  const sortedPosts = useMemo(() => {\r\n    const sortedPosts = posts.slice()\r\n\r\n    return sortedPosts\r\n  }, [posts])\r\n\r\n  let content\r\n\r\n  if (isLoading) {\r\n    content = <Spinner text=\"Loading...\" />\r\n  } else if (isSuccess) {\r\n    const renderedPosts = sortedPosts.map(post => (\r\n      <PostExcerpt key={post.id} post={post} />\r\n    ))\r\n\r\n    const containerClassname = classnames('posts-container', {\r\n      disabled: isFetching\r\n    })\r\n\r\n    content = <div className={containerClassname}>{renderedPosts}</div>\r\n  } else if (isError) {\r\n    content = <div>{error}</div>\r\n  }\r\n\r\n  return (\r\n    <section className=\"posts-list\">\r\n      <h2 className=\"link-label\">Posts</h2>\r\n      {content}\r\n    </section>\r\n  )\r\n}","C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\features\\album\\AlbumList.js",[],"C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\features\\todos\\TodosList.js",[],"C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\features\\photo\\SinglePhotoPage.js",["193","194"],"import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { Spinner } from '../../components/Spinner'\r\nimport { useGetPhotoQuery } from '../api/apiSlice'\r\n\r\nexport const SinglePhotoPage = ({ match }) => {\r\n    const { photoId } = match.params\r\n\r\n    const { data: photo, isFetching, isSuccess } = useGetPhotoQuery(photoId)\r\n\r\n    let content\r\n    if (isFetching) {\r\n        content = <Spinner text=\"Loading...\" />\r\n    } else if (isSuccess) {\r\n        content = (\r\n        <article className=\"post\">\r\n            <h2>{photo.title}</h2>\r\n            <img src={photo.url} alt=\"\" className=\"img\" />\r\n        </article>\r\n        )\r\n    }\r\n\r\n    return <section>{content}</section>\r\n}","C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\features\\posts\\EditPostForm.js",["195"],"import React, { useState } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport { Spinner } from '../../components/Spinner'\r\nimport { useGetPostQuery, useEditPostMutation } from '../api/apiSlice'\r\n\r\n\r\nexport const EditPostForm = ({ match }) => {\r\n  const { postId } = match.params\r\n\r\n  const { data: post } = useGetPostQuery(postId)\r\n  const [updatePost, { isLoading }] = useEditPostMutation()\r\n\r\n  const [title, setTitle] = useState(post.title)\r\n  const [body, setContent] = useState(post.body)\r\n\r\n  const history = useHistory()\r\n\r\n  const onTitleChanged = e => setTitle(e.target.value)\r\n  const onContentChanged = e => setContent(e.target.value)\r\n\r\n  const onSavePostClicked = async () => {\r\n    if (title && body) {\r\n      await updatePost({ id: postId, title, body })\r\n      history.push(`/posts/${postId}`)\r\n    }\r\n  }\r\n\r\n  const spinner = isLoading ? <Spinner text=\"Saving...\" /> : null\r\n  return (\r\n    <section>\r\n      <h2>Edit Post</h2>\r\n      <form>\r\n        <label htmlFor=\"postTitle\">Post Title:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"postTitle\"\r\n          name=\"postTitle\"\r\n          placeholder=\"What's on your mind?\"\r\n          value={title}\r\n          onChange={onTitleChanged}\r\n        />\r\n        <label htmlFor=\"postContent\">Content:</label>\r\n        <textarea\r\n          id=\"postContent\"\r\n          name=\"postContent\"\r\n          value={body}\r\n          onChange={onContentChanged}\r\n        />\r\n      </form>\r\n      <button type=\"button\" onClick={onSavePostClicked}>\r\n        Save Post\r\n      </button>\r\n    </section>\r\n  )\r\n}","C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\features\\posts\\SinglePostPage.js",["196","197","198"],"import React, { useMemo } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { selectPostById } from './postsSlice'\r\n\r\nimport { Spinner } from '../../components/Spinner'\r\nimport { useGetPostQuery, useGetCommentsQuery } from '../api/apiSlice'\r\n\r\nimport { PostAuthor } from './PostAuthor'\r\nimport { TimeAgo } from './TimeAgo'\r\n//import { ReactionButtons } from './ReactionButtons'\r\n\r\nexport const SinglePostPage = ({ match }) => {\r\n    const { postId } = match.params\r\n\r\n    const { data: post, isFetching, isSuccess } = useGetPostQuery(postId)\r\n\r\n    const { data: listComments } = useGetCommentsQuery(undefined, {\r\n        selectFromResult: result => {\r\n          return ({\r\n            ...result,\r\n          })\r\n        } \r\n    })\r\n\r\n    const CommentById = useMemo(() => listComments?.filter(({postId: commentId}) => commentId === Number(postId), [listComments, postId]))\r\n\r\n    const commentName = CommentById?.map(comment => (\r\n        <div key={comment?.id} className=\"item-comments\">\r\n          <h2>{comment?.name}</h2>\r\n          <p>{comment?.email}</p>\r\n          <p>{comment?.body}</p>\r\n        </div>\r\n    ))\r\n    \r\n    let content\r\n    if (isFetching) {\r\n        content = <Spinner text=\"Loading...\" />\r\n    } else if (isSuccess) {\r\n        content = (\r\n        <article className=\"post\">\r\n            <h2>{post.title}</h2>\r\n            <div>\r\n            <PostAuthor userId={post.id} />\r\n            <TimeAgo timestamp={post.date} />\r\n            </div>\r\n            <p className=\"post-content\">{post.body}</p>\r\n         \r\n            <Link to={`/editPost/${post.id}`} className=\"button\">\r\n            Edit Post\r\n            </Link>\r\n        </article>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <div>\r\n                {content}\r\n            </div>\r\n            <div className=\"comments\">\r\n                <h3>Comments</h3>\r\n                {commentName}\r\n            </div>\r\n        </section>\r\n    )\r\n}","C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\features\\photo\\PhotoList.js",[],"C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\features\\album\\SingleAlbumPage.js",["199","200"],"import React, {useMemo} from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { Spinner } from '../../components/Spinner'\r\nimport { useGetAlbumQuery, useGetPhotosQuery } from '../api/apiSlice'\r\n\r\nexport const SingleAlbumPage = ({ match }) => {\r\n    const { albumId } = match.params\r\n\r\n    const { data: album, isFetching, isSuccess } = useGetAlbumQuery(albumId)\r\n\r\n    const { data: listPhoto } = useGetPhotosQuery(undefined, {\r\n        selectFromResult: result => {\r\n          return ({\r\n            ...result,\r\n          })\r\n        } \r\n    })\r\n\r\n    const CommentById = useMemo(() => listPhoto?.filter(({albumId: photoId}) => photoId === Number(albumId), [listPhoto, albumId]))\r\n\r\n    const photoName = CommentById?.map(photo => (\r\n        <div key={photo?.id} className=\"item-photos\">\r\n            <h3><Link to={`/photo/${photo?.id}`}>{photo?.title}</Link></h3>\r\n            <img src={photo.thumbnailUrl} alt=\"\" />\r\n        </div>\r\n    ))\r\n\r\n    let content\r\n    if (isFetching) {\r\n        content = <Spinner text=\"Loading...\" />\r\n    } else if (isSuccess) {\r\n        content = (\r\n        <article className=\"post\">\r\n            <h2>{album.title}</h2>\r\n        </article>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <div className=\"name-albums\">\r\n                <h2>Name Albums:</h2>\r\n                {content}\r\n            </div>\r\n            <div className=\"photo-list\">\r\n                {photoName}\r\n            </div>\r\n        </section>\r\n    )\r\n}","C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\features\\todos\\Single_TodosPage.js",["201","202"],"import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { Spinner } from '../../components/Spinner'\r\nimport { useGetTodoQuery } from '../api/apiSlice'\r\n\r\nexport const SingleTodosPage = ({ match }) => {\r\n    const { todoId } = match.params\r\n\r\n    const { data: todo, isFetching, isSuccess } = useGetTodoQuery(todoId)\r\n\r\n    let content\r\n    if (isFetching) {\r\n        content = <Spinner text=\"Loading...\" />\r\n    } else if (isSuccess) {\r\n        content = (\r\n            <article className=\"post\">\r\n                <h2>{todo.title}</h2>\r\n                <p>Status: {(todo.completed).toString()}</p>\r\n            </article>\r\n        )\r\n    }\r\n\r\n    return <section>{content}</section>\r\n}","C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\api\\client.js",[],"C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\features\\posts\\TimeAgo.js",[],"C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\features\\posts\\PostAuthor.js",[],"C:\\Users\\Administrator\\Desktop\\Practice_ReactJS\\RTK_Query\\src\\components\\Spinner.js",[],{"ruleId":"203","severity":1,"message":"204","line":51,"column":25,"nodeType":"205","endLine":51,"endColumn":32},{"ruleId":"206","severity":1,"message":"207","line":8,"column":10,"nodeType":"205","messageId":"208","endLine":8,"endColumn":20},{"ruleId":"206","severity":1,"message":"209","line":10,"column":10,"nodeType":"205","messageId":"208","endLine":10,"endColumn":18},{"ruleId":"206","severity":1,"message":"210","line":2,"column":8,"nodeType":"205","messageId":"208","endLine":2,"endColumn":20},{"ruleId":"206","severity":1,"message":"211","line":3,"column":8,"nodeType":"205","messageId":"208","endLine":3,"endColumn":20},{"ruleId":"206","severity":1,"message":"212","line":2,"column":10,"nodeType":"205","messageId":"208","endLine":2,"endColumn":21},{"ruleId":"206","severity":1,"message":"213","line":2,"column":23,"nodeType":"205","messageId":"208","endLine":2,"endColumn":34},{"ruleId":"206","severity":1,"message":"214","line":4,"column":12,"nodeType":"205","messageId":"208","endLine":4,"endColumn":26},{"ruleId":"203","severity":1,"message":"204","line":35,"column":28,"nodeType":"205","endLine":35,"endColumn":35},{"ruleId":"206","severity":1,"message":"215","line":2,"column":10,"nodeType":"205","messageId":"208","endLine":2,"endColumn":13},{"ruleId":"206","severity":1,"message":"216","line":38,"column":5,"nodeType":"205","messageId":"208","endLine":38,"endColumn":12},{"ruleId":"206","severity":1,"message":"213","line":2,"column":10,"nodeType":"205","messageId":"208","endLine":2,"endColumn":21},{"ruleId":"206","severity":1,"message":"217","line":3,"column":10,"nodeType":"205","messageId":"208","endLine":3,"endColumn":14},{"ruleId":"206","severity":1,"message":"218","line":29,"column":9,"nodeType":"205","messageId":"208","endLine":29,"endColumn":16},{"ruleId":"206","severity":1,"message":"213","line":2,"column":10,"nodeType":"205","messageId":"208","endLine":2,"endColumn":21},{"ruleId":"206","severity":1,"message":"219","line":5,"column":10,"nodeType":"205","messageId":"208","endLine":5,"endColumn":24},{"ruleId":"203","severity":1,"message":"204","line":27,"column":25,"nodeType":"205","endLine":27,"endColumn":32},{"ruleId":"206","severity":1,"message":"213","line":2,"column":10,"nodeType":"205","messageId":"208","endLine":2,"endColumn":21},{"ruleId":"203","severity":1,"message":"204","line":21,"column":25,"nodeType":"205","endLine":21,"endColumn":32},{"ruleId":"206","severity":1,"message":"213","line":2,"column":10,"nodeType":"205","messageId":"208","endLine":2,"endColumn":21},{"ruleId":"206","severity":1,"message":"217","line":3,"column":10,"nodeType":"205","messageId":"208","endLine":3,"endColumn":14},"react-hooks/exhaustive-deps","React Hook useMemo does nothing when called with only one argument. Did you forget to pass an array of dependencies?","Identifier","no-unused-vars","'fetchUsers' is defined but never used.","unusedVar","'apiSlice' is defined but never used.","'postsReducer' is defined but never used.","'usersReducer' is defined but never used.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","'createSelector' is defined but never used.","'sub' is defined but never used.","'refetch' is assigned a value but never used.","'Link' is defined but never used.","'spinner' is assigned a value but never used.","'selectPostById' is defined but never used."]