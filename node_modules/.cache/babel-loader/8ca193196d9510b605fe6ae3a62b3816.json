{"ast":null,"code":"// Import the RTK Query methods from the React-specific entry point\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'; // Define our single API slice object\n\nexport const apiSlice = createApi({\n  // The cache reducer expects to be added at `state.api` (already default - this is optional)\n  reducerPath: 'api',\n  // All of our requests will have URLs starting with '/fakeApi'\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'https://jsonplaceholder.typicode.com'\n  }),\n  // The \"endpoints\" represent operations and requests for this server\n  tagTypes: ['Post'],\n  endpoints: builder => ({\n    // The `getPosts` endpoint is a \"query\" operation that returns data\n    getPosts: builder.query({\n      // The URL for the request is '/fakeApi/posts'\n      query: () => 'posts',\n      providesTags: ['Post']\n    }),\n    getPost: builder.query({\n      query: postId => `/posts/${postId}`\n    }),\n    addNewPost: builder.mutation({\n      query: initialPost => ({\n        url: '/posts',\n        method: 'POST',\n        // Include the entire post object as the body of the request\n        body: initialPost\n      })\n    }),\n    getUsers: builder.query({\n      // The URL for the request is '/fakeApi/posts'\n      query: () => 'users',\n      providesTags: ['Users']\n    }),\n    getUser: builder.query({\n      query: userId => `/posts/${userId}`\n    }),\n    getAlbums: builder.query({\n      // The URL for the request is '/fakeApi/posts'\n      query: () => 'albums',\n      providesTags: ['Users']\n    }),\n    getPhotos: builder.query({\n      // The URL for the request is '/fakeApi/posts'\n      query: () => 'photos',\n      providesTags: ['Users']\n    }),\n    getComments: builder.query({\n      // The URL for the request is '/fakeApi/posts'\n      query: () => 'comments',\n      providesTags: ['Users']\n    }),\n    getTodos: builder.query({\n      // The URL for the request is '/fakeApi/posts'\n      query: () => 'todos',\n      providesTags: ['Users']\n    })\n  })\n}); // Export the auto-generated hook for the `getPosts` query endpoint\n\nexport const {\n  useGetPostsQuery,\n  useGetPostQuery,\n  useGetUsersQuery,\n  useGetUserQuery,\n  useGetAlbumsQuery,\n  useGetPhotosQuery,\n  useGetCommentsQuery,\n  useGetTodosQuery\n} = apiSlice;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/Nodric/finnal/src/features/api/apiSlice.js"],"names":["createApi","fetchBaseQuery","apiSlice","reducerPath","baseQuery","baseUrl","tagTypes","endpoints","builder","getPosts","query","providesTags","getPost","postId","addNewPost","mutation","initialPost","url","method","body","getUsers","getUser","userId","getAlbums","getPhotos","getComments","getTodos","useGetPostsQuery","useGetPostQuery","useGetUsersQuery","useGetUserQuery","useGetAlbumsQuery","useGetPhotosQuery","useGetCommentsQuery","useGetTodosQuery"],"mappings":"AAAA;AACA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,8BAA1C,C,CAEA;;AACA,OAAO,MAAMC,QAAQ,GAAGF,SAAS,CAAC;AAC9B;AACAG,EAAAA,WAAW,EAAE,KAFiB;AAG9B;AACAC,EAAAA,SAAS,EAAEH,cAAc,CAAC;AAAEI,IAAAA,OAAO,EAAE;AAAX,GAAD,CAJK;AAK9B;AACAC,EAAAA,QAAQ,EAAE,CAAC,MAAD,CANoB;AAO9BC,EAAAA,SAAS,EAAEC,OAAO,KAAK;AACnB;AACAC,IAAAA,QAAQ,EAAED,OAAO,CAACE,KAAR,CAAc;AACpB;AACAA,MAAAA,KAAK,EAAE,MAAM,OAFO;AAGpBC,MAAAA,YAAY,EAAE,CAAC,MAAD;AAHM,KAAd,CAFS;AAOnBC,IAAAA,OAAO,EAAEJ,OAAO,CAACE,KAAR,CAAc;AACnBA,MAAAA,KAAK,EAAEG,MAAM,IAAK,UAASA,MAAO;AADf,KAAd,CAPU;AAUnBC,IAAAA,UAAU,EAAEN,OAAO,CAACO,QAAR,CAAiB;AACzBL,MAAAA,KAAK,EAAEM,WAAW,KAAK;AACnBC,QAAAA,GAAG,EAAE,QADc;AAEnBC,QAAAA,MAAM,EAAE,MAFW;AAGnB;AACAC,QAAAA,IAAI,EAAEH;AAJa,OAAL;AADO,KAAjB,CAVO;AAmBfI,IAAAA,QAAQ,EAAEZ,OAAO,CAACE,KAAR,CAAc;AACpB;AACAA,MAAAA,KAAK,EAAE,MAAM,OAFO;AAGpBC,MAAAA,YAAY,EAAE,CAAC,OAAD;AAHM,KAAd,CAnBK;AAwBfU,IAAAA,OAAO,EAAEb,OAAO,CAACE,KAAR,CAAc;AACnBA,MAAAA,KAAK,EAAEY,MAAM,IAAK,UAASA,MAAO;AADf,KAAd,CAxBM;AA2BfC,IAAAA,SAAS,EAAEf,OAAO,CAACE,KAAR,CAAc;AACrB;AACAA,MAAAA,KAAK,EAAE,MAAM,QAFQ;AAGrBC,MAAAA,YAAY,EAAE,CAAC,OAAD;AAHO,KAAd,CA3BI;AAgCfa,IAAAA,SAAS,EAAEhB,OAAO,CAACE,KAAR,CAAc;AACrB;AACAA,MAAAA,KAAK,EAAE,MAAM,QAFQ;AAGrBC,MAAAA,YAAY,EAAE,CAAC,OAAD;AAHO,KAAd,CAhCI;AAqCfc,IAAAA,WAAW,EAAEjB,OAAO,CAACE,KAAR,CAAc;AACvB;AACAA,MAAAA,KAAK,EAAE,MAAM,UAFU;AAGvBC,MAAAA,YAAY,EAAE,CAAC,OAAD;AAHS,KAAd,CArCE;AA0Cfe,IAAAA,QAAQ,EAAElB,OAAO,CAACE,KAAR,CAAc;AACpB;AACAA,MAAAA,KAAK,EAAE,MAAM,OAFO;AAGpBC,MAAAA,YAAY,EAAE,CAAC,OAAD;AAHM,KAAd;AA1CK,GAAL;AAPY,CAAD,CAA1B,C,CAyDP;;AACA,OAAO,MAAM;AAAEgB,EAAAA,gBAAF;AAAoBC,EAAAA,eAApB;AAAqCC,EAAAA,gBAArC;AAAsDC,EAAAA,eAAtD;AAAuEC,EAAAA,iBAAvE;AAA2FC,EAAAA,iBAA3F;AAA+GC,EAAAA,mBAA/G;AAAqIC,EAAAA;AAArI,IAAyJhC,QAA/J","sourcesContent":["// Import the RTK Query methods from the React-specific entry point\r\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\r\n\r\n// Define our single API slice object\r\nexport const apiSlice = createApi({\r\n    // The cache reducer expects to be added at `state.api` (already default - this is optional)\r\n    reducerPath: 'api',\r\n    // All of our requests will have URLs starting with '/fakeApi'\r\n    baseQuery: fetchBaseQuery({ baseUrl: 'https://jsonplaceholder.typicode.com' }),\r\n    // The \"endpoints\" represent operations and requests for this server\r\n    tagTypes: ['Post'],\r\n    endpoints: builder => ({\r\n        // The `getPosts` endpoint is a \"query\" operation that returns data\r\n        getPosts: builder.query({\r\n            // The URL for the request is '/fakeApi/posts'\r\n            query: () => 'posts',\r\n            providesTags: ['Post']\r\n        }),\r\n        getPost: builder.query({\r\n            query: postId => `/posts/${postId}`\r\n        }),\r\n        addNewPost: builder.mutation({\r\n            query: initialPost => ({\r\n                url: '/posts',\r\n                method: 'POST',\r\n                // Include the entire post object as the body of the request\r\n                body: initialPost\r\n            }),\r\n\r\n        }),\r\n            getUsers: builder.query({\r\n                // The URL for the request is '/fakeApi/posts'\r\n                query: () => 'users',\r\n                providesTags: ['Users']\r\n            }),\r\n            getUser: builder.query({\r\n                query: userId => `/posts/${userId}`\r\n            }),\r\n            getAlbums: builder.query({\r\n                // The URL for the request is '/fakeApi/posts'\r\n                query: () => 'albums',\r\n                providesTags: ['Users']\r\n            }),\r\n            getPhotos: builder.query({\r\n                // The URL for the request is '/fakeApi/posts'\r\n                query: () => 'photos',\r\n                providesTags: ['Users']\r\n            }),\r\n            getComments: builder.query({\r\n                // The URL for the request is '/fakeApi/posts'\r\n                query: () => 'comments',\r\n                providesTags: ['Users']\r\n            }),\r\n            getTodos: builder.query({\r\n                // The URL for the request is '/fakeApi/posts'\r\n                query: () => 'todos',\r\n                providesTags: ['Users']\r\n            }),\r\n    })\r\n})\r\n\r\n// Export the auto-generated hook for the `getPosts` query endpoint\r\nexport const { useGetPostsQuery, useGetPostQuery, useGetUsersQuery,useGetUserQuery, useGetAlbumsQuery , useGetPhotosQuery , useGetCommentsQuery , useGetTodosQuery} = apiSlice"]},"metadata":{},"sourceType":"module"}