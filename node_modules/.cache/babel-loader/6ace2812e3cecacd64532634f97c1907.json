{"ast":null,"code":"import { createSlice, createAsyncThunk, createSelector, createEntityAdapter } from '@reduxjs/toolkit';\nimport { client } from '../../api/client';\nconst postsAdapter = createEntityAdapter({\n  sortComparer: (a, b) => b.date.localeCompare(a.date)\n});\nconst initialState = postsAdapter.getInitialState({\n  status: 'idle',\n  error: null\n});\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n  const response = await client.get('/fakeApi/posts');\n  return response.data;\n});\nexport const addNewPost = createAsyncThunk('posts/addNewPost', async initialPost => {\n  const response = await client.post('/fakeApi/posts', initialPost);\n  return response.data;\n});\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    reactionAdded(state, action) {\n      const {\n        postId,\n        reaction\n      } = action.payload;\n      const existingPost = state.entities[postId];\n\n      if (existingPost) {\n        existingPost.reactions[reaction]++;\n      }\n    },\n\n    postUpdated(state, action) {\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      const existingPost = state.entities[id];\n\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    }\n\n  },\n\n  extraReducers(builder) {\n    builder.addCase(fetchPosts.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(fetchPosts.fulfilled, (state, action) => {\n      state.status = 'succeeded'; // Add any fetched posts to the array\n\n      postsAdapter.upsertMany(state, action.payload);\n    }).addCase(fetchPosts.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(addNewPost.fulfilled, postsAdapter.addOne);\n  }\n\n});\nexport const {\n  postAdded,\n  postUpdated,\n  reactionAdded\n} = postsSlice.actions;\nexport default postsSlice.reducer;\nexport const {\n  selectAll: selectAllPosts,\n  selectById: selectPostById,\n  selectIds: selectPostIds\n} = postsAdapter.getSelectors(state => state.posts);\nexport const selectPostsByUser = createSelector([selectAllPosts, (state, userId) => userId], (posts, userId) => posts.filter(post => post.user === userId));","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/Nodric/finnal/src/features/posts/postsSlice.js"],"names":["createSlice","createAsyncThunk","createSelector","createEntityAdapter","client","postsAdapter","sortComparer","a","b","date","localeCompare","initialState","getInitialState","status","error","fetchPosts","response","get","data","addNewPost","initialPost","post","postsSlice","name","reducers","reactionAdded","state","action","postId","reaction","payload","existingPost","entities","reactions","postUpdated","id","title","content","extraReducers","builder","addCase","pending","fulfilled","upsertMany","rejected","message","addOne","postAdded","actions","reducer","selectAll","selectAllPosts","selectById","selectPostById","selectIds","selectPostIds","getSelectors","posts","selectPostsByUser","userId","filter","user"],"mappings":"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","sourcesContent":["import {\r\n  createSlice,\r\n  createAsyncThunk,\r\n  createSelector,\r\n  createEntityAdapter,\r\n} from '@reduxjs/toolkit'\r\nimport { client } from '../../api/client'\r\n\r\nconst postsAdapter = createEntityAdapter({\r\n  sortComparer: (a, b) => b.date.localeCompare(a.date),\r\n})\r\n\r\nconst initialState = postsAdapter.getInitialState({\r\n  status: 'idle',\r\n  error: null,\r\n})\r\n\r\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\r\n  const response = await client.get('/fakeApi/posts')\r\n  return response.data\r\n})\r\n\r\nexport const addNewPost = createAsyncThunk(\r\n  'posts/addNewPost',\r\n  async (initialPost) => {\r\n    const response = await client.post('/fakeApi/posts', initialPost)\r\n    return response.data\r\n  }\r\n)\r\n\r\nconst postsSlice = createSlice({\r\n  name: 'posts',\r\n  initialState,\r\n  reducers: {\r\n    reactionAdded(state, action) {\r\n      const { postId, reaction } = action.payload\r\n      const existingPost = state.entities[postId]\r\n      if (existingPost) {\r\n        existingPost.reactions[reaction]++\r\n      }\r\n    },\r\n    postUpdated(state, action) {\r\n      const { id, title, content } = action.payload\r\n      const existingPost = state.entities[id]\r\n      if (existingPost) {\r\n        existingPost.title = title\r\n        existingPost.content = content\r\n      }\r\n    },\r\n  },\r\n  extraReducers(builder) {\r\n    builder\r\n      .addCase(fetchPosts.pending, (state, action) => {\r\n        state.status = 'loading'\r\n      })\r\n      .addCase(fetchPosts.fulfilled, (state, action) => {\r\n        state.status = 'succeeded'\r\n        // Add any fetched posts to the array\r\n        postsAdapter.upsertMany(state, action.payload)\r\n      })\r\n      .addCase(fetchPosts.rejected, (state, action) => {\r\n        state.status = 'failed'\r\n        state.error = action.error.message\r\n      })\r\n      .addCase(addNewPost.fulfilled, postsAdapter.addOne)\r\n  },\r\n})\r\n\r\nexport const { postAdded, postUpdated, reactionAdded } = postsSlice.actions\r\n\r\nexport default postsSlice.reducer\r\n\r\nexport const {\r\n  selectAll: selectAllPosts,\r\n  selectById: selectPostById,\r\n  selectIds: selectPostIds,\r\n} = postsAdapter.getSelectors((state) => state.posts)\r\n\r\nexport const selectPostsByUser = createSelector(\r\n  [selectAllPosts, (state, userId) => userId],\r\n  (posts, userId) => posts.filter((post) => post.user === userId)\r\n)\r\n"]},"metadata":{},"sourceType":"module"}