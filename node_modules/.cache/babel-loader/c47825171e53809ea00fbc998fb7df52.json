{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nexport const apiSlice = createApi({\n  reducerPath: 'api',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'https://jsonplaceholder.typicode.com/'\n  }),\n  tagTypes: ['Post'],\n  endpoints: builder => ({\n    getPosts: builder.query({\n      query: () => '/posts',\n      providesTags: function () {\n        let result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        let error = arguments.length > 1 ? arguments[1] : undefined;\n        let arg = arguments.length > 2 ? arguments[2] : undefined;\n        return ['Post', ...result.map(_ref => {\n          let {\n            id\n          } = _ref;\n          return {\n            type: 'Post',\n            id\n          };\n        })];\n      }\n    }),\n    getPost: builder.query({\n      query: postId => `/posts/${postId}`,\n      providesTags: (result, error, arg) => [{\n        type: 'Post',\n        id: arg\n      }]\n    }),\n    addNewPost: builder.mutation({\n      query: initialPost => ({\n        url: '/posts',\n        method: 'POST',\n        body: initialPost\n      }),\n      invalidatesTags: ['Post']\n    }),\n    editPost: builder.mutation({\n      query: post => ({\n        url: `/posts/${post.id}`,\n        method: 'PATCH',\n        body: post\n      }),\n      invalidatesTags: (result, error, arg) => [{\n        type: 'Post',\n        id: arg.id\n      }]\n    }),\n    //Get To do list\n    getTodos: builder.query({\n      query: () => '/todos',\n      providesTags: function () {\n        let result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        let error = arguments.length > 1 ? arguments[1] : undefined;\n        let arg = arguments.length > 2 ? arguments[2] : undefined;\n        return ['Todos', ...result.map(_ref2 => {\n          let {\n            id\n          } = _ref2;\n          return {\n            type: 'Todos',\n            id\n          };\n        })];\n      }\n    }),\n    getTodo: builder.query({\n      query: todoId => `/todos/${todoId}`,\n      providesTags: (result, error, arg) => [{\n        type: 'Todos',\n        id: arg\n      }]\n    }),\n    //Get Photo\n    getPhotos: builder.query({\n      query: () => '/photos',\n      providesTags: function () {\n        let result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        let error = arguments.length > 1 ? arguments[1] : undefined;\n        let arg = arguments.length > 2 ? arguments[2] : undefined;\n        return ['Photos', ...result.map(_ref3 => {\n          let {\n            id\n          } = _ref3;\n          return {\n            type: 'Photo',\n            id\n          };\n        })];\n      }\n    }),\n    getPhoto: builder.query({\n      query: photoId => `/photos/${photoId}`,\n      providesTags: (result, error, arg) => [{\n        type: 'Photo',\n        id: arg\n      }]\n    }),\n    //Get Albums\n    getAlbums: builder.query({\n      query: () => '/albums',\n      providesTags: function () {\n        let result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        let error = arguments.length > 1 ? arguments[1] : undefined;\n        let arg = arguments.length > 2 ? arguments[2] : undefined;\n        return ['Albums', ...result.map(_ref4 => {\n          let {\n            id\n          } = _ref4;\n          return {\n            type: 'Album',\n            id\n          };\n        })];\n      }\n    }),\n    getAlbum: builder.query({\n      query: albumId => `/albums/${albumId}`,\n      providesTags: (result, error, arg) => [{\n        type: 'Album',\n        id: arg\n      }]\n    }),\n    //Get Comments\n    getComments: builder.query({\n      query: () => '/comments',\n      providesTags: function () {\n        let result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        let error = arguments.length > 1 ? arguments[1] : undefined;\n        let arg = arguments.length > 2 ? arguments[2] : undefined;\n        return ['Comments', ...result.map(_ref5 => {\n          let {\n            id\n          } = _ref5;\n          return {\n            type: 'Comment',\n            id\n          };\n        })];\n      }\n    }),\n    getComment: builder.query({\n      query: commentId => `/comments/${commentId}`,\n      providesTags: (result, error, arg) => [{\n        type: 'Comment',\n        id: arg\n      }]\n    }),\n\n    async onQueryStarted(_ref6, _ref7) {\n      let {\n        postId,\n        reaction\n      } = _ref6;\n      let {\n        dispatch,\n        queryFulfilled\n      } = _ref7;\n      const patchResult = dispatch(apiSlice.util.updateQueryData('getPosts', undefined, draft => {\n        const post = draft.find(post => post.id === postId);\n\n        if (post) {\n          post.reactions[reaction]++;\n        }\n      }));\n\n      try {\n        await queryFulfilled;\n      } catch {\n        patchResult.undo();\n      }\n    }\n\n  })\n});\nexport const {\n  useGetPostsQuery,\n  useGetPostQuery,\n  useAddNewPostMutation,\n  useEditPostMutation,\n  useAddReactionMutation,\n  useGetTodosQuery,\n  useGetTodoQuery,\n  useGetPhotosQuery,\n  useGetPhotoQuery,\n  useGetAlbumsQuery,\n  useGetAlbumQuery,\n  useGetCommentsQuery,\n  useGetCommentQuery\n} = apiSlice;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/Practice_ReactJS/RTK_Query/src/features/api/apiSlice.js"],"names":["createApi","fetchBaseQuery","apiSlice","reducerPath","baseQuery","baseUrl","tagTypes","endpoints","builder","getPosts","query","providesTags","result","error","arg","map","id","type","getPost","postId","addNewPost","mutation","initialPost","url","method","body","invalidatesTags","editPost","post","getTodos","getTodo","todoId","getPhotos","getPhoto","photoId","getAlbums","getAlbum","albumId","getComments","getComment","commentId","onQueryStarted","reaction","dispatch","queryFulfilled","patchResult","util","updateQueryData","undefined","draft","find","reactions","undo","useGetPostsQuery","useGetPostQuery","useAddNewPostMutation","useEditPostMutation","useAddReactionMutation","useGetTodosQuery","useGetTodoQuery","useGetPhotosQuery","useGetPhotoQuery","useGetAlbumsQuery","useGetAlbumQuery","useGetCommentsQuery","useGetCommentQuery"],"mappings":"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","sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\r\n\r\nexport const apiSlice = createApi({\r\n  reducerPath: 'api',\r\n  baseQuery: fetchBaseQuery({ baseUrl: 'https://jsonplaceholder.typicode.com/' }),\r\n  tagTypes: ['Post'],\r\n  endpoints: builder => ({\r\n    getPosts: builder.query({\r\n      query: () => '/posts',\r\n      providesTags: (result = [], error, arg) => [\r\n        'Post',\r\n        ...result.map(({ id }) => ({ type: 'Post', id }))\r\n      ]\r\n    }),\r\n    getPost: builder.query({\r\n      query: postId => `/posts/${postId}`,\r\n      providesTags: (result, error, arg) => [{ type: 'Post', id: arg }]\r\n    }),\r\n    addNewPost: builder.mutation({\r\n      query: initialPost => ({\r\n        url: '/posts',\r\n        method: 'POST',\r\n        body: initialPost\r\n      }),\r\n      invalidatesTags: ['Post']\r\n    }),\r\n    editPost: builder.mutation({\r\n      query: post => ({\r\n        url: `/posts/${post.id}`,\r\n        method: 'PATCH',\r\n        body: post\r\n      }),\r\n      invalidatesTags: (result, error, arg) => [{ type: 'Post', id: arg.id }]\r\n    }),\r\n    //Get To do list\r\n    getTodos: builder.query({\r\n      query: () => '/todos',\r\n      providesTags: (result = [], error, arg) => [\r\n        'Todos',\r\n        ...result.map(({ id }) => ({ type: 'Todos', id }))\r\n      ]\r\n    }),\r\n    getTodo: builder.query({\r\n      query: todoId => `/todos/${todoId}`,\r\n      providesTags: (result, error, arg) => [{ type: 'Todos', id: arg }]\r\n    }),\r\n\r\n    //Get Photo\r\n    getPhotos: builder.query({\r\n      query: () => '/photos',\r\n      providesTags: (result = [], error, arg) => [\r\n        'Photos',\r\n        ...result.map(({ id }) => ({ type: 'Photo', id }))\r\n      ]\r\n    }),\r\n    getPhoto: builder.query({\r\n      query: photoId => `/photos/${photoId}`,\r\n      providesTags: (result, error, arg) => [{ type: 'Photo', id: arg }]\r\n    }),\r\n\r\n    //Get Albums\r\n    getAlbums: builder.query({\r\n      query: () => '/albums',\r\n      providesTags: (result = [], error, arg) => [\r\n        'Albums',\r\n        ...result.map(({ id }) => ({ type: 'Album', id }))\r\n      ]\r\n    }),\r\n    getAlbum: builder.query({\r\n      query: albumId => `/albums/${albumId}`,\r\n      providesTags: (result, error, arg) => [{ type: 'Album', id: arg }]\r\n    }),\r\n\r\n    //Get Comments\r\n    getComments: builder.query({\r\n      query: () => '/comments',\r\n      providesTags: (result = [], error, arg) => [\r\n        'Comments',\r\n        ...result.map(({ id }) => ({ type: 'Comment', id }))\r\n      ]\r\n    }),\r\n    getComment: builder.query({\r\n      query: commentId => `/comments/${commentId}`,\r\n      providesTags: (result, error, arg) => [{ type: 'Comment', id: arg }]\r\n    }),\r\n\r\n    async onQueryStarted({ postId, reaction }, { dispatch, queryFulfilled }) {\r\n      const patchResult = dispatch(\r\n        apiSlice.util.updateQueryData('getPosts', undefined, draft => {\r\n          const post = draft.find(post => post.id === postId)\r\n          if (post) {\r\n            post.reactions[reaction]++\r\n          }\r\n        })\r\n      )\r\n      try {\r\n        await queryFulfilled\r\n      } catch {\r\n        patchResult.undo()\r\n      }\r\n    }\r\n  })\r\n})\r\n\r\nexport const {\r\n  useGetPostsQuery,\r\n  useGetPostQuery,\r\n  useAddNewPostMutation,\r\n  useEditPostMutation,\r\n  useAddReactionMutation,\r\n  useGetTodosQuery,\r\n  useGetTodoQuery,\r\n  useGetPhotosQuery,\r\n  useGetPhotoQuery,\r\n  useGetAlbumsQuery,\r\n  useGetAlbumQuery,\r\n  useGetCommentsQuery,\r\n  useGetCommentQuery,\r\n} = apiSlice"]},"metadata":{},"sourceType":"module"}