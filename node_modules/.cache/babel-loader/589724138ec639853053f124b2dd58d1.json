{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\Practice_ReactJS\\\\RTK_Query\\\\src\\\\features\\\\users\\\\UserPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createSelector } from '@reduxjs/toolkit';\nimport { selectUserById } from '../users/usersSlice';\nimport { useGetPostsQuery } from '../api/apiSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserPage = _ref => {\n  _s();\n\n  let {\n    match\n  } = _ref;\n  const {\n    userId\n  } = match.params;\n  const user = useSelector(state => selectUserById(state, userId)); // const selectPostsForUser = useMemo(() => {\n  //   const emptyArray = []\n  //   // Return a unique selector instance for this page so that\n  //   // the filtered results are correctly memoized\n  //   return createSelector(\n  //     res => res.data,\n  //     (res, userId) => userId,\n  //     (data, userId) => data?.filter(post => post.user === userId) ?? emptyArray\n  //   )\n  // }, [])\n\n  const {\n    data: listPosts\n  } = useGetPostsQuery(undefined, {\n    selectFromResult: result => {\n      return { ...result // postsForUser: selectPostsForUser(result, Number(userId))\n\n      };\n    }\n  });\n  const postByUserId = useMemo(() => listPosts === null || listPosts === void 0 ? void 0 : listPosts.filter(_ref2 => {\n    let {\n      userId: postId\n    } = _ref2;\n    return postId === Number(userId);\n  }, [listPosts, userId]));\n  const postTitles = postByUserId === null || postByUserId === void 0 ? void 0 : postByUserId.map(post => /*#__PURE__*/_jsxDEV(\"article\", {\n    className: \"post-excerpt\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"post-content\",\n      children: post.body.substring(0, 100)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: `/posts/${post === null || post === void 0 ? void 0 : post.id}`,\n      className: \"button muted-button\",\n      children: \"View Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }, this)]\n  }, post === null || post === void 0 ? void 0 : post.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Author Name: \", user === null || user === void 0 ? void 0 : user.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"posts-container\",\n      children: postTitles\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UserPage, \"a1/eXHkMereb+pqZVCcbqU2mT90=\", false, function () {\n  return [useSelector, useGetPostsQuery];\n});\n\n_c = UserPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserPage\");","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/Practice_ReactJS/RTK_Query/src/features/users/UserPage.js"],"names":["React","useMemo","useSelector","Link","createSelector","selectUserById","useGetPostsQuery","UserPage","match","userId","params","user","state","data","listPosts","undefined","selectFromResult","result","postByUserId","filter","postId","Number","postTitles","map","post","title","body","substring","id","name"],"mappings":";;;AAAE,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAASC,gBAAT,QAAiC,iBAAjC;;AAEA,OAAO,MAAMC,QAAQ,GAAG,QAAe;AAAA;;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AACnC,QAAM;AAAEC,IAAAA;AAAF,MAAaD,KAAK,CAACE,MAAzB;AAEA,QAAMC,IAAI,GAAGT,WAAW,CAACU,KAAK,IAAIP,cAAc,CAACO,KAAD,EAAQH,MAAR,CAAxB,CAAxB,CAHmC,CAMnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAM;AAAEI,IAAAA,IAAI,EAAEC;AAAR,MAAsBR,gBAAgB,CAACS,SAAD,EAAY;AACtDC,IAAAA,gBAAgB,EAAEC,MAAM,IAAI;AAC1B,aAAQ,EACN,GAAGA,MADG,CAEN;;AAFM,OAAR;AAID;AANqD,GAAZ,CAA5C;AASA,QAAMC,YAAY,GAAGjB,OAAO,CAAC,MAAMa,SAAN,aAAMA,SAAN,uBAAMA,SAAS,CAAEK,MAAX,CAAkB;AAAA,QAAC;AAACV,MAAAA,MAAM,EAAEW;AAAT,KAAD;AAAA,WAAsBA,MAAM,KAAKC,MAAM,CAACZ,MAAD,CAAvC;AAAA,GAAlB,EAAmE,CAACK,SAAD,EAAYL,MAAZ,CAAnE,CAAP,CAA5B;AAEA,QAAMa,UAAU,GAAGJ,YAAH,aAAGA,YAAH,uBAAGA,YAAY,CAAEK,GAAd,CAAkBC,IAAI,iBACvC;AAAwB,IAAA,SAAS,EAAC,cAAlC;AAAA,4BACE;AAAA,gBAAKA,IAAI,CAACC;AAAV;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAG,MAAA,SAAS,EAAC,cAAb;AAAA,gBAA6BD,IAAI,CAACE,IAAL,CAAUC,SAAV,CAAoB,CAApB,EAAuB,GAAvB;AAA7B;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,IAAD;AAAM,MAAA,EAAE,EAAG,UAASH,IAAV,aAAUA,IAAV,uBAAUA,IAAI,CAAEI,EAAG,EAA7B;AAAgC,MAAA,SAAS,EAAC,qBAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA,KAAcJ,IAAd,aAAcA,IAAd,uBAAcA,IAAI,CAAEI,EAApB;AAAA;AAAA;AAAA;AAAA,UADiB,CAAnB;AAUA,sBACE;AAAA,4BACE;AAAA,kCAAkBjB,IAAlB,aAAkBA,IAAlB,uBAAkBA,IAAI,CAAEkB,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAGE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,gBAAkCP;AAAlC;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOH,CA7CM;;GAAMf,Q;UAGIL,W,EAceI,gB;;;KAjBnBC,Q","sourcesContent":["  import React, { useMemo } from 'react'\r\n  import { useSelector } from 'react-redux'\r\n  import { Link } from 'react-router-dom'\r\n  import { createSelector } from '@reduxjs/toolkit'\r\n\r\n  import { selectUserById } from '../users/usersSlice'\r\n  import { useGetPostsQuery } from '../api/apiSlice'\r\n\r\n  export const UserPage = ({ match }) => {\r\n      const { userId } = match.params\r\n\r\n      const user = useSelector(state => selectUserById(state, userId))\r\n\r\n\r\n      // const selectPostsForUser = useMemo(() => {\r\n      //   const emptyArray = []\r\n      //   // Return a unique selector instance for this page so that\r\n      //   // the filtered results are correctly memoized\r\n      //   return createSelector(\r\n      //     res => res.data,\r\n      //     (res, userId) => userId,\r\n      //     (data, userId) => data?.filter(post => post.user === userId) ?? emptyArray\r\n      //   )\r\n      // }, [])\r\n\r\n      const { data: listPosts } = useGetPostsQuery(undefined, {\r\n        selectFromResult: result => {\r\n          return ({\r\n            ...result,\r\n            // postsForUser: selectPostsForUser(result, Number(userId))\r\n          })\r\n        } \r\n      })\r\n\r\n      const postByUserId = useMemo(() => listPosts?.filter(({userId: postId}) => postId === Number(userId), [listPosts, userId]))\r\n\r\n      const postTitles = postByUserId?.map(post => (\r\n        <article key={post?.id} className=\"post-excerpt\">\r\n          <h3>{post.title}</h3>\r\n          <p className=\"post-content\">{post.body.substring(0, 100)}</p>\r\n          <Link to={`/posts/${post?.id}`} className=\"button muted-button\">\r\n            View Post\r\n          </Link>\r\n        </article>\r\n      ))\r\n\r\n      return (\r\n        <section>\r\n          <h2>Author Name: {user?.name}</h2>\r\n    \r\n          <div className=\"posts-container\">{postTitles}</div>\r\n        </section>\r\n      )\r\n  }"]},"metadata":{},"sourceType":"module"}