{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\Nodric\\\\finnal\\\\src\\\\features\\\\comments\\\\Comments.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Spinner } from '../../components/Spinner';\nimport { useGetCommentsQuery } from '../api/apiSlice';\nimport classnames from 'classnames';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nlet PostExcerpt = _ref => {\n  let {\n    post\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    className: \"post-excerpt\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"postss\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item\",\n        children: [\"PostId :\", post.postId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item\",\n        children: [\"Id :\", post.id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item\",\n        children: [\"Name :\", post.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item\",\n        children: [\"Email :\", post.email]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item\",\n        children: [\"Body :\", post.body]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)\n  }, post.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n\n_c = PostExcerpt;\nexport const CommentsList = () => {\n  _s();\n\n  const {\n    data: comments = [],\n    isLoading,\n    isFetching,\n    isSuccess,\n    isError,\n    error\n  } = useGetCommentsQuery(); // const sortedPosts = useMemo(() => {\n  //   const sortedPosts = posts.slice()\n  //   // Sort posts in descending chronological order\n  //   sortedPosts.sort((a, b) => b.date.localeCompare(a.date))\n  //   return sortedPosts\n  // }, [posts])\n\n  let content;\n\n  if (isLoading) {\n    content = /*#__PURE__*/_jsxDEV(Spinner, {\n      text: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 15\n    }, this);\n  } else if (isSuccess) {\n    const renderedPosts = comments.map(comment => /*#__PURE__*/_jsxDEV(PostExcerpt, {\n      post: comment\n    }, comment.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this));\n    const containerClassname = classnames('posts-container', {\n      disabled: isFetching\n    });\n    content = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: containerClassname,\n      children: renderedPosts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 15\n    }, this);\n  } else if (isError) {\n    content = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error.toString()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 15\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"posts-list\",\n    children: content\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CommentsList, \"mI3zIx4g3IQHgBKQmVctU7hPuWs=\", false, function () {\n  return [useGetCommentsQuery];\n});\n\n_c2 = CommentsList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PostExcerpt\");\n$RefreshReg$(_c2, \"CommentsList\");","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/Nodric/finnal/src/features/comments/Comments.js"],"names":["React","Spinner","useGetCommentsQuery","classnames","PostExcerpt","post","postId","id","name","email","body","CommentsList","data","comments","isLoading","isFetching","isSuccess","isError","error","content","renderedPosts","map","comment","containerClassname","disabled","toString"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAASC,mBAAT,QAAoC,iBAApC;AACA,OAAOC,UAAP,MAAuB,YAAvB;;;AAEA,IAAIC,WAAW,GAAG,QAAc;AAAA,MAAb;AAAEC,IAAAA;AAAF,GAAa;AAE9B,sBACE;AAAS,IAAA,SAAS,EAAC,cAAnB;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,8BACA;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,+BAA+BA,IAAI,CAACC,MAApC;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eAEA;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,2BAA2BD,IAAI,CAACE,EAAhC;AAAA;AAAA;AAAA;AAAA;AAAA,cAFA,eAGA;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,6BAA6BF,IAAI,CAACG,IAAlC;AAAA;AAAA;AAAA;AAAA;AAAA,cAHA,eAIA;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,8BAA8BH,IAAI,CAACI,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA,cAJA,eAKA;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,6BAA6BJ,IAAI,CAACK,IAAlC;AAAA;AAAA;AAAA;AAAA;AAAA,cALA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,KAAuCL,IAAI,CAACE,EAA5C;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAbD;;KAAIH,W;AAeJ,OAAO,MAAMO,YAAY,GAAG,MAAM;AAAA;;AAChC,QAAM;AACJC,IAAAA,IAAI,EAAEC,QAAQ,GAAG,EADb;AAEJC,IAAAA,SAFI;AAGJC,IAAAA,UAHI;AAIJC,IAAAA,SAJI;AAKJC,IAAAA,OALI;AAMJC,IAAAA;AANI,MAQFhB,mBAAmB,EARvB,CADgC,CAWhC;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIiB,OAAJ;;AAEA,MAAIL,SAAJ,EAAe;AACbK,IAAAA,OAAO,gBAAG,QAAC,OAAD;AAAS,MAAA,IAAI,EAAC;AAAd;AAAA;AAAA;AAAA;AAAA,YAAV;AACD,GAFD,MAEO,IAAIH,SAAJ,EAAe;AACpB,UAAMI,aAAa,GAAGP,QAAQ,CAACQ,GAAT,CAAaC,OAAO,iBACxC,QAAC,WAAD;AAA8B,MAAA,IAAI,EAAEA;AAApC,OAAkBA,OAAO,CAACf,EAA1B;AAAA;AAAA;AAAA;AAAA,YADoB,CAAtB;AAIA,UAAMgB,kBAAkB,GAAGpB,UAAU,CAAC,iBAAD,EAAoB;AACvDqB,MAAAA,QAAQ,EAAET;AAD6C,KAApB,CAArC;AAIAI,IAAAA,OAAO,gBAAG;AAAK,MAAA,SAAS,EAAEI,kBAAhB;AAAA,gBAAqCH;AAArC;AAAA;AAAA;AAAA;AAAA,YAAV;AACD,GAVM,MAUA,IAAIH,OAAJ,EAAa;AAClBE,IAAAA,OAAO,gBAAG;AAAA,gBAAMD,KAAK,CAACO,QAAN;AAAN;AAAA;AAAA;AAAA;AAAA,YAAV;AACD;;AAED,sBACE;AAAS,IAAA,SAAS,EAAC,YAAnB;AAAA,cACGN;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAzCM;;GAAMR,Y;UASPT,mB;;;MATOS,Y","sourcesContent":["import React from 'react'\r\n\r\n\r\nimport { Spinner } from '../../components/Spinner'\r\nimport { useGetCommentsQuery } from '../api/apiSlice'\r\nimport classnames from 'classnames'\r\n\r\nlet PostExcerpt = ({ post }) => {\r\n\r\n  return (\r\n    <article className=\"post-excerpt\" key={post.id}>\r\n      <div className=\"postss\">\r\n      <div className=\"item\">PostId :{post.postId}</div>\r\n      <div className=\"item\">Id :{post.id}</div>\r\n      <div className=\"item\">Name :{post.name}</div>\r\n      <div className=\"item\">Email :{post.email}</div>\r\n      <div className=\"item\">Body :{post.body}</div>\r\n      </div>\r\n    </article>\r\n  )\r\n}\r\n\r\nexport const CommentsList = () => {\r\n  const {\r\n    data: comments = [],\r\n    isLoading,\r\n    isFetching,\r\n    isSuccess,\r\n    isError,\r\n    error,\r\n   \r\n  } = useGetCommentsQuery()\r\n\r\n  // const sortedPosts = useMemo(() => {\r\n  //   const sortedPosts = posts.slice()\r\n  //   // Sort posts in descending chronological order\r\n  //   sortedPosts.sort((a, b) => b.date.localeCompare(a.date))\r\n  //   return sortedPosts\r\n  // }, [posts])\r\n\r\n  let content\r\n\r\n  if (isLoading) {\r\n    content = <Spinner text=\"Loading...\" />\r\n  } else if (isSuccess) {\r\n    const renderedPosts = comments.map(comment => (\r\n      <PostExcerpt key={comment.id} post={comment} />\r\n    ))\r\n\r\n    const containerClassname = classnames('posts-container', {\r\n      disabled: isFetching\r\n    })\r\n\r\n    content = <div className={containerClassname}>{renderedPosts}</div>\r\n  } else if (isError) {\r\n    content = <div>{error.toString()}</div>\r\n  }\r\n\r\n  return (\r\n    <section className=\"posts-list\">\r\n      {content}\r\n    </section>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}