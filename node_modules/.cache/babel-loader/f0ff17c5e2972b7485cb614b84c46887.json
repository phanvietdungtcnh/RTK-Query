{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\Nodric\\\\finnal\\\\src\\\\features\\\\posts\\\\PostsList.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Spinner } from '../../components/Spinner';\nimport { useGetPostsQuery } from '../api/apiSlice';\nimport classnames from 'classnames';\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nlet PostExcerpt = _ref => {\n  let {\n    post\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    className: \"card text-white bg-primary mb-3\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"card-title\",\n        style: {\n          color: 'white'\n        },\n        children: [\"TITLE : \", post.title]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"card-text\",\n        children: [\"BODY :\", post.body]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: `/posts/${post.id}`,\n        className: \"btn btn-warning\",\n        children: \"View Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }, this)\n  }, post.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n\n_c = PostExcerpt;\nexport const PostsList = () => {\n  _s();\n\n  const test = useSelector(useGetCommentsQuery => useGetCommentsQuery.comments);\n  console.log(test);\n  const {\n    data: posts = [],\n    isLoading,\n    isFetching,\n    isSuccess,\n    isError,\n    error\n  } = useGetPostsQuery(); // const sortedPosts = useMemo(() => {\n  //   const sortedPosts = posts.slice()\n  //   // Sort posts in descending chronological order\n  //   sortedPosts.sort((a, b) => b.date.localeCompare(a.date))\n  //   return sortedPosts\n  // }, [posts])\n\n  let content;\n\n  if (isLoading) {\n    content = /*#__PURE__*/_jsxDEV(Spinner, {\n      text: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }, this);\n  } else if (isSuccess) {\n    const renderedPosts = posts.map(post => /*#__PURE__*/_jsxDEV(PostExcerpt, {\n      post: post\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this));\n    const containerClassname = classnames('posts-container', {\n      disabled: isFetching\n    });\n    content = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: containerClassname,\n      children: renderedPosts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 15\n    }, this);\n  } else if (isError) {\n    content = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error.toString()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 15\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"posts-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contennt\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"POSTS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), content]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PostsList, \"nZIBD++THwCKi7/MC8kWSOXAWYg=\", false, function () {\n  return [useSelector, useGetPostsQuery];\n});\n\n_c2 = PostsList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PostExcerpt\");\n$RefreshReg$(_c2, \"PostsList\");","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/Nodric/finnal/src/features/posts/PostsList.js"],"names":["React","Link","Spinner","useGetPostsQuery","classnames","useSelector","PostExcerpt","post","color","title","body","id","PostsList","test","useGetCommentsQuery","comments","console","log","data","posts","isLoading","isFetching","isSuccess","isError","error","content","renderedPosts","map","containerClassname","disabled","toString"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,IAAT,QAAqB,kBAArB;AAGA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAASC,gBAAT,QAAiC,iBAAjC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAAQC,WAAR,QAA0B,aAA1B;;;AAIA,IAAIC,WAAW,GAAG,QAAc;AAAA,MAAb;AAAEC,IAAAA;AAAF,GAAa;AAE9B,sBACE;AAAS,IAAA,SAAS,EAAC,iCAAnB;AAAA,2BACA;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,YAAd;AAA2B,QAAA,KAAK,EAAE;AAACC,UAAAA,KAAK,EAAE;AAAR,SAAlC;AAAA,+BAA6DD,IAAI,CAACE,KAAlE;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAG,QAAA,SAAS,EAAC,WAAb;AAAA,6BAAgCF,IAAI,CAACG,IAArC;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAIE,QAAC,IAAD;AAAO,QAAA,EAAE,EAAG,UAASH,IAAI,CAACI,EAAG,EAA7B;AAAgC,QAAA,SAAS,EAAC,iBAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADA,KAA0DJ,IAAI,CAACI,EAA/D;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CAhBD;;KAAIL,W;AAmBJ,OAAO,MAAMM,SAAS,GAAG,MAAM;AAAA;;AAE7B,QAAMC,IAAI,GAAGR,WAAW,CAAES,mBAAD,IAAyBA,mBAAmB,CAACC,QAA9C,CAAxB;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACA,QAAM;AACJK,IAAAA,IAAI,EAAEC,KAAK,GAAG,EADV;AAEJC,IAAAA,SAFI;AAGJC,IAAAA,UAHI;AAIJC,IAAAA,SAJI;AAKJC,IAAAA,OALI;AAMJC,IAAAA;AANI,MAQFrB,gBAAgB,EARpB,CAL6B,CAiB7B;AACA;AACA;AACA;AACA;AACA;;AAIA,MAAIsB,OAAJ;;AAEA,MAAIL,SAAJ,EAAe;AACbK,IAAAA,OAAO,gBAAG,QAAC,OAAD;AAAS,MAAA,IAAI,EAAC;AAAd;AAAA;AAAA;AAAA;AAAA,YAAV;AACD,GAFD,MAEO,IAAIH,SAAJ,EAAe;AACpB,UAAMI,aAAa,GAAGP,KAAK,CAACQ,GAAN,CAAUpB,IAAI,iBAClC,QAAC,WAAD;AAA2B,MAAA,IAAI,EAAEA;AAAjC,OAAkBA,IAAI,CAACI,EAAvB;AAAA;AAAA;AAAA;AAAA,YADoB,CAAtB;AAIA,UAAMiB,kBAAkB,GAAGxB,UAAU,CAAC,iBAAD,EAAoB;AACvDyB,MAAAA,QAAQ,EAAER;AAD6C,KAApB,CAArC;AAIAI,IAAAA,OAAO,gBAAG;AAAK,MAAA,SAAS,EAAEG,kBAAhB;AAAA,gBAAqCF;AAArC;AAAA;AAAA;AAAA;AAAA,YAAV;AACD,GAVM,MAUA,IAAIH,OAAJ,EAAa;AAClBE,IAAAA,OAAO,gBAAG;AAAA,gBAAMD,KAAK,CAACM,QAAN;AAAN;AAAA;AAAA;AAAA;AAAA,YAAV;AACD;;AAED,sBACE;AAAS,IAAA,SAAS,EAAC,YAAnB;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,EAIGL,OAJH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CApDM;;GAAMb,S;UAEEP,W,EAWTF,gB;;;MAbOS,S","sourcesContent":["import React from 'react'\r\n\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nimport { Spinner } from '../../components/Spinner'\r\nimport { useGetPostsQuery } from '../api/apiSlice'\r\nimport classnames from 'classnames'\r\nimport {useSelector} from 'react-redux'\r\n\r\n\r\n\r\nlet PostExcerpt = ({ post }) => {\r\n \r\n  return (\r\n    <article className=\"card text-white bg-primary mb-3\" key={post.id}>\r\n    <div className=\"card-body\">\r\n      <h2 className=\"card-title\" style={{color: 'white'}}>TITLE : {post.title}</h2>\r\n      <p className=\"card-text\">BODY :{post.body}</p>\r\n      {/* <ReactionButtons post={post} /> */}\r\n      <Link  to={`/posts/${post.id}`} className=\"btn btn-warning\">\r\n        View Post\r\n      </Link>\r\n    </div>\r\n    \r\n    </article>\r\n          \r\n  )\r\n}\r\n\r\n\r\nexport const PostsList = () => {\r\n\r\n  const test = useSelector((useGetCommentsQuery) => useGetCommentsQuery.comments )\r\n\r\n  console.log(test)\r\n  const {\r\n    data: posts = [],\r\n    isLoading,\r\n    isFetching,\r\n    isSuccess,\r\n    isError,\r\n    error,\r\n   \r\n  } = useGetPostsQuery()\r\n\r\n \r\n\r\n  // const sortedPosts = useMemo(() => {\r\n  //   const sortedPosts = posts.slice()\r\n  //   // Sort posts in descending chronological order\r\n  //   sortedPosts.sort((a, b) => b.date.localeCompare(a.date))\r\n  //   return sortedPosts\r\n  // }, [posts])\r\n \r\n\r\n\r\n  let content\r\n\r\n  if (isLoading) {\r\n    content = <Spinner text=\"Loading...\" />\r\n  } else if (isSuccess) {\r\n    const renderedPosts = posts.map(post => (\r\n      <PostExcerpt key={post.id} post={post} />\r\n    ))\r\n\r\n    const containerClassname = classnames('posts-container', {\r\n      disabled: isFetching\r\n    })\r\n\r\n    content = <div className={containerClassname}>{renderedPosts}</div>\r\n  } else if (isError) {\r\n    content = <div>{error.toString()}</div>\r\n  }\r\n\r\n  return (\r\n    <section className=\"posts-list\">\r\n      <div className='contennt'>\r\n        <p >POSTS</p>\r\n      </div>\r\n      {content}\r\n    </section>\r\n  )\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}