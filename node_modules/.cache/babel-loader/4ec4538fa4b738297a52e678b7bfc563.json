{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\Practice_ReactJS\\\\RTK_Query\\\\src\\\\features\\\\posts\\\\PostsList.js\",\n    _s = $RefreshSig$();\n\nimport { Spinner } from '../../components/Spinner';\nimport React, { useMemo } from 'react';\nimport { Link } from 'react-router-dom';\nimport { PostAuthor } from './PostAuthor';\nimport { TimeAgo } from './TimeAgo';\nimport { useGetPostsQuery } from '../api/apiSlice';\nimport classnames from 'classnames';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nlet PostExcerpt = _ref => {\n  let {\n    post\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    className: \"post-excerpt\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(PostAuthor, {\n        userId: post.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TimeAgo, {\n        timestamp: post.date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"post-content\",\n      children: post.body.substring(0, 100)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: `/posts/${post.id}`,\n      className: \"button muted-button\",\n      children: \"View Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)]\n  }, post.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n\n_c = PostExcerpt;\nPostExcerpt = /*#__PURE__*/React.memo(PostExcerpt);\nexport const PostsList = () => {\n  _s();\n\n  const {\n    data: posts = [],\n    isFetching,\n    isLoading,\n    isSuccess,\n    isError,\n    error,\n    refetch\n  } = useGetPostsQuery();\n  const sortedPosts = useMemo(() => {\n    const sortedPosts = posts.slice();\n    return sortedPosts;\n  }, [posts]);\n  let content;\n\n  if (isLoading) {\n    content = /*#__PURE__*/_jsxDEV(Spinner, {\n      text: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 15\n    }, this);\n  } else if (isSuccess) {\n    const renderedPosts = sortedPosts.map(post => /*#__PURE__*/_jsxDEV(PostExcerpt, {\n      post: post\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this));\n    const containerClassname = classnames('posts-container', {\n      disabled: isFetching\n    });\n    content = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: containerClassname,\n      children: renderedPosts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 15\n    }, this);\n  } else if (isError) {\n    content = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 15\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"posts-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"link-label\",\n      children: \"Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), content]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PostsList, \"EUxbiT2zwGZOLSDQPAyVSGEukp0=\", false, function () {\n  return [useGetPostsQuery];\n});\n\n_c2 = PostsList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PostExcerpt\");\n$RefreshReg$(_c2, \"PostsList\");","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/Practice_ReactJS/RTK_Query/src/features/posts/PostsList.js"],"names":["Spinner","React","useMemo","Link","PostAuthor","TimeAgo","useGetPostsQuery","classnames","PostExcerpt","post","title","id","date","body","substring","memo","PostsList","data","posts","isFetching","isLoading","isSuccess","isError","error","refetch","sortedPosts","slice","content","renderedPosts","map","containerClassname","disabled"],"mappings":"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","sourcesContent":["import { Spinner } from '../../components/Spinner'\r\nimport React, { useMemo } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { PostAuthor } from './PostAuthor'\r\nimport { TimeAgo } from './TimeAgo'\r\n\r\nimport { useGetPostsQuery } from '../api/apiSlice'\r\n\r\nimport classnames from 'classnames'\r\n\r\nlet PostExcerpt = ({ post }) => {\r\n  return (\r\n    <article className=\"post-excerpt\" key={post.id}>\r\n      <h3>{post.title}</h3>\r\n      <div>\r\n        <PostAuthor userId={post.id} />\r\n        <TimeAgo timestamp={post.date} />\r\n      </div>\r\n      <p className=\"post-content\">{post.body.substring(0, 100)}</p>\r\n\r\n      <Link to={`/posts/${post.id}`} className=\"button muted-button\">\r\n        View Post\r\n      </Link>\r\n    </article>\r\n  )\r\n}\r\nPostExcerpt = React.memo(PostExcerpt)\r\n\r\nexport const PostsList = () => {\r\n\r\n  const {\r\n    data: posts = [],\r\n    isFetching,\r\n    isLoading,\r\n    isSuccess,\r\n    isError,\r\n    error,\r\n    refetch\r\n  } = useGetPostsQuery()\r\n\r\n  const sortedPosts = useMemo(() => {\r\n    const sortedPosts = posts.slice()\r\n\r\n    return sortedPosts\r\n  }, [posts])\r\n\r\n  let content\r\n\r\n  if (isLoading) {\r\n    content = <Spinner text=\"Loading...\" />\r\n  } else if (isSuccess) {\r\n    const renderedPosts = sortedPosts.map(post => (\r\n      <PostExcerpt key={post.id} post={post} />\r\n    ))\r\n\r\n    const containerClassname = classnames('posts-container', {\r\n      disabled: isFetching\r\n    })\r\n\r\n    content = <div className={containerClassname}>{renderedPosts}</div>\r\n  } else if (isError) {\r\n    content = <div>{error}</div>\r\n  }\r\n\r\n  return (\r\n    <section className=\"posts-list\">\r\n      <h2 className=\"link-label\">Posts</h2>\r\n      {content}\r\n    </section>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}