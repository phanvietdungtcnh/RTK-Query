{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\Nodric\\\\finnal\\\\src\\\\features\\\\posts\\\\SinglePostPage.js\",\n    _s = $RefreshSig$();\n\n// import React from 'react'\n// import { Spinner } from '../../components/Spinner'\n// import { useGetPostQuery } from '../api/apiSlice'\n// export const SinglePostPage = ({ match }) => {\n//     const { postId } = match.params\n//     const { data: post, isFetching, isSuccess } = useGetPostQuery(postId)\n//     let content\n//     if (isFetching) {\n//         content = <Spinner text=\"Loading...\" />\n//     } else if (isSuccess) {\n//         content = (\n//              <article className=\"post-excerpt\" key={post.id}>\n//              <div className=\"postss\">\n//                <div className=\"item\">ID: {post.id}</div>\n//                <div className=\"item\">BODY :{post.body}</div>\n//                <div className=\"item\">TITLE : {post.title}</div>\n//                <div className=\"item\">USERID :{post.userId}</div>\n//                {/* <ReactionButtons post={post} /> */} \n//              </div>\n//              </article>\n//         )\n//     }\n//     return <section>{content}</section>\n// }\nimport React, { useMemo } from 'react';\nimport { Spinner } from '../../components/Spinner';\nimport { useGetPostQuery, useGetCommentsQuery } from '../api/apiSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SinglePostPage = _ref => {\n  _s();\n\n  let {\n    match\n  } = _ref;\n  const {\n    postId\n  } = match.params;\n  const {\n    data: post,\n    isFetching,\n    isSuccess\n  } = useGetPostQuery(postId);\n  const {\n    data: listComments\n  } = useGetCommentsQuery(undefined, {\n    selectFromResult: result => {\n      return { ...result\n      };\n    }\n  });\n  const CommentById = useMemo(() => listComments === null || listComments === void 0 ? void 0 : listComments.filter(_ref2 => {\n    let {\n      postId: commentId\n    } = _ref2;\n    return commentId === Number(postId);\n  }, [listComments, postId]));\n  const commentName = CommentById === null || CommentById === void 0 ? void 0 : CommentById.map(comment =>\n  /*#__PURE__*/\n  // <div key={comment?.id} className=\"item-comments\">\n  //   <h2>{comment?.name}</h2>\n  //   <p>{comment?.email}</p>\n  //   <p>{comment?.body}</p>\n  // </div>\n  _jsxDEV(\"article\", {\n    className: \"post-excerpt\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"postss\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item\",\n        children: [\"Name :\", comment === null || comment === void 0 ? void 0 : comment.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item\",\n        children: [\"Email : \", comment === null || comment === void 0 ? void 0 : comment.email]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item\",\n        children: [\"Body :\", comment.body]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)\n  }, comment === null || comment === void 0 ? void 0 : comment.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 13\n  }, this));\n  let content;\n\n  if (isFetching) {\n    content = /*#__PURE__*/_jsxDEV(Spinner, {\n      text: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 19\n    }, this);\n  } else if (isSuccess) {\n    content = /*#__PURE__*/_jsxDEV(\"article\", {\n      className: \"post-excerpt\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"postss\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"item\",\n          children: [\"TITLE : \", post.title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"item\",\n          children: [\"BODY :\", post.body]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this)\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Comments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), commentName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SinglePostPage, \"LoGYmaghJhgefICnLej6WtaxkeE=\", false, function () {\n  return [useGetPostQuery, useGetCommentsQuery];\n});\n\n_c = SinglePostPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"SinglePostPage\");","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/Nodric/finnal/src/features/posts/SinglePostPage.js"],"names":["React","useMemo","Spinner","useGetPostQuery","useGetCommentsQuery","SinglePostPage","match","postId","params","data","post","isFetching","isSuccess","listComments","undefined","selectFromResult","result","CommentById","filter","commentId","Number","commentName","map","comment","name","email","body","id","content","title"],"mappings":";;;AAAA;AAEA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAASC,eAAT,EAA0BC,mBAA1B,QAAqD,iBAArD;;AAIA,OAAO,MAAMC,cAAc,GAAG,QAAe;AAAA;;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AACzC,QAAM;AAAEC,IAAAA;AAAF,MAAaD,KAAK,CAACE,MAAzB;AAEA,QAAM;AAAEC,IAAAA,IAAI,EAAEC,IAAR;AAAcC,IAAAA,UAAd;AAA0BC,IAAAA;AAA1B,MAAwCT,eAAe,CAACI,MAAD,CAA7D;AAEA,QAAM;AAAEE,IAAAA,IAAI,EAAEI;AAAR,MAAyBT,mBAAmB,CAACU,SAAD,EAAY;AAC1DC,IAAAA,gBAAgB,EAAEC,MAAM,IAAI;AAC1B,aAAQ,EACN,GAAGA;AADG,OAAR;AAGD;AALyD,GAAZ,CAAlD;AAQA,QAAMC,WAAW,GAAGhB,OAAO,CAAC,MAAMY,YAAN,aAAMA,YAAN,uBAAMA,YAAY,CAAEK,MAAd,CAAqB;AAAA,QAAC;AAACX,MAAAA,MAAM,EAAEY;AAAT,KAAD;AAAA,WAAyBA,SAAS,KAAKC,MAAM,CAACb,MAAD,CAA7C;AAAA,GAArB,EAA4E,CAACM,YAAD,EAAeN,MAAf,CAA5E,CAAP,CAA3B;AAEA,QAAMc,WAAW,GAAGJ,WAAH,aAAGA,WAAH,uBAAGA,WAAW,CAAEK,GAAb,CAAiBC,OAAO;AAAA;AACxC;AACA;AACA;AACA;AACA;AAEI;AAAS,IAAA,SAAS,EAAC,cAAnB;AAAA,2BACA;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,8BACA;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,6BAA6BA,OAA7B,aAA6BA,OAA7B,uBAA6BA,OAAO,CAAEC,IAAtC;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eAEA;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,+BAA+BD,OAA/B,aAA+BA,OAA/B,uBAA+BA,OAAO,CAAEE,KAAxC;AAAA;AAAA;AAAA;AAAA;AAAA,cAFA,eAGA;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,6BAA6BF,OAAO,CAACG,IAArC;AAAA;AAAA;AAAA;AAAA;AAAA,cAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA,KAAuCH,OAAvC,aAAuCA,OAAvC,uBAAuCA,OAAO,CAAEI,EAAhD;AAAA;AAAA;AAAA;AAAA,UAPY,CAApB;AAgBA,MAAIC,OAAJ;;AACA,MAAIjB,UAAJ,EAAgB;AACZiB,IAAAA,OAAO,gBAAG,QAAC,OAAD;AAAS,MAAA,IAAI,EAAC;AAAd;AAAA;AAAA;AAAA;AAAA,YAAV;AACH,GAFD,MAEO,IAAIhB,SAAJ,EAAe;AAClBgB,IAAAA,OAAO,gBACH;AAAS,MAAA,SAAS,EAAC,cAAnB;AAAA,6BACA;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,gCACE;AAAI,UAAA,SAAS,EAAC,MAAd;AAAA,iCAA8BlB,IAAI,CAACmB,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAG,UAAA,SAAS,EAAC,MAAb;AAAA,+BAA2BnB,IAAI,CAACgB,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADA,OAAuChB,IAAI,CAACiB,EAA5C;AAAA;AAAA;AAAA;AAAA,YADJ;AAUH;;AAED,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,gBACKC;AADL;AAAA;AAAA;AAAA;AAAA,YAFJ,eAKI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAEKP,WAFL;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH,CA3DM;;GAAMhB,c;UAGqCF,e,EAEfC,mB;;;KALtBC,c","sourcesContent":["// import React from 'react'\r\n\r\n// import { Spinner } from '../../components/Spinner'\r\n// import { useGetPostQuery } from '../api/apiSlice'\r\n\r\n// export const SinglePostPage = ({ match }) => {\r\n//     const { postId } = match.params\r\n\r\n\r\n//     const { data: post, isFetching, isSuccess } = useGetPostQuery(postId)\r\n\r\n//     let content\r\n//     if (isFetching) {\r\n//         content = <Spinner text=\"Loading...\" />\r\n//     } else if (isSuccess) {\r\n//         content = (\r\n//              <article className=\"post-excerpt\" key={post.id}>\r\n//              <div className=\"postss\">\r\n//                <div className=\"item\">ID: {post.id}</div>\r\n//                <div className=\"item\">BODY :{post.body}</div>\r\n//                <div className=\"item\">TITLE : {post.title}</div>\r\n//                <div className=\"item\">USERID :{post.userId}</div>\r\n//                {/* <ReactionButtons post={post} /> */} \r\n//              </div>\r\n//              </article>\r\n//         )\r\n//     }\r\n//     return <section>{content}</section>\r\n// }\r\n\r\n\r\nimport React, { useMemo } from 'react'\r\nimport { Spinner } from '../../components/Spinner'\r\nimport { useGetPostQuery, useGetCommentsQuery } from '../api/apiSlice'\r\n\r\n\r\n\r\nexport const SinglePostPage = ({ match }) => {\r\n    const { postId } = match.params\r\n\r\n    const { data: post, isFetching, isSuccess } = useGetPostQuery(postId)\r\n\r\n    const { data: listComments } = useGetCommentsQuery(undefined, {\r\n        selectFromResult: result => {\r\n          return ({\r\n            ...result,\r\n          })\r\n        } \r\n    })\r\n\r\n    const CommentById = useMemo(() => listComments?.filter(({postId: commentId}) => commentId === Number(postId), [listComments, postId]))\r\n\r\n    const commentName = CommentById?.map(comment => (\r\n        // <div key={comment?.id} className=\"item-comments\">\r\n        //   <h2>{comment?.name}</h2>\r\n        //   <p>{comment?.email}</p>\r\n        //   <p>{comment?.body}</p>\r\n        // </div>\r\n\r\n            <article className=\"post-excerpt\" key={comment?.id}>\r\n            <div className=\"postss\">\r\n            <div className=\"item\">Name :{comment?.name}</div>\r\n            <div className=\"item\">Email : {comment?.email}</div>\r\n            <div className=\"item\">Body :{comment.body}</div>\r\n            </div>\r\n            </article>\r\n    ))\r\n    \r\n    let content\r\n    if (isFetching) {\r\n        content = <Spinner text=\"Loading...\" />\r\n    } else if (isSuccess) {\r\n        content = (\r\n            <article className=\"post-excerpt\" key={post.id}>\r\n            <div className=\"postss\">\r\n              <h2 className=\"item\">TITLE : {post.title}</h2>\r\n              <p className=\"item\">BODY :{post.body}</p>\r\n              {/* <ReactionButtons post={post} /> */}\r\n            \r\n            </div>\r\n            </article>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <h3 >Post</h3>\r\n            <div>\r\n                {content}\r\n            </div>\r\n            <div className=\"comments\">\r\n                <h3>Comments</h3>\r\n                {commentName}\r\n            </div>\r\n        </section>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}