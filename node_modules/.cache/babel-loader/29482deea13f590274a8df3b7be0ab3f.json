{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\Practice_ReactJS\\\\RTK_Query\\\\src\\\\features\\\\posts\\\\EditPostForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Spinner } from '../../components/Spinner';\nimport { useGetPostQuery, useEditPostMutation } from '../api/apiSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const EditPostForm = _ref => {\n  _s();\n\n  let {\n    match\n  } = _ref;\n  const {\n    postId\n  } = match.params;\n  const {\n    data: post\n  } = useGetPostQuery(postId);\n  const [updatePost, {\n    isLoading\n  }] = useEditPostMutation();\n  const [title, setTitle] = useState(post.title);\n  const [body, setContent] = useState(post.body);\n  const history = useHistory();\n\n  const onTitleChanged = e => setTitle(e.target.value);\n\n  const onContentChanged = e => setContent(e.target.value);\n\n  const onSavePostClicked = async () => {\n    if (title && body) {\n      await updatePost({\n        id: postId,\n        title,\n        body\n      });\n      history.push(`/posts/${postId}`);\n    }\n  };\n\n  const spinner = isLoading ? /*#__PURE__*/_jsxDEV(Spinner, {\n    text: \"Saving...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 31\n  }, this) : null;\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Edit Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postTitle\",\n        children: \"Post Title:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"postTitle\",\n        name: \"postTitle\",\n        placeholder: \"What's on your mind?\",\n        value: title,\n        onChange: onTitleChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postContent\",\n        children: \"Content:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"postContent\",\n        name: \"postContent\",\n        value: body,\n        onChange: onContentChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: onSavePostClicked,\n      children: \"Save Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EditPostForm, \"BZ5lt41r6Q48X1kWfzY0n8LzAaE=\", false, function () {\n  return [useGetPostQuery, useEditPostMutation, useHistory];\n});\n\n_c = EditPostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditPostForm\");","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/Practice_ReactJS/RTK_Query/src/features/posts/EditPostForm.js"],"names":["React","useState","useHistory","Spinner","useGetPostQuery","useEditPostMutation","EditPostForm","match","postId","params","data","post","updatePost","isLoading","title","setTitle","body","setContent","history","onTitleChanged","e","target","value","onContentChanged","onSavePostClicked","id","push","spinner"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAASC,eAAT,EAA0BC,mBAA1B,QAAqD,iBAArD;;AAGA,OAAO,MAAMC,YAAY,GAAG,QAAe;AAAA;;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AACzC,QAAM;AAAEC,IAAAA;AAAF,MAAaD,KAAK,CAACE,MAAzB;AAEA,QAAM;AAAEC,IAAAA,IAAI,EAAEC;AAAR,MAAiBP,eAAe,CAACI,MAAD,CAAtC;AACA,QAAM,CAACI,UAAD,EAAa;AAAEC,IAAAA;AAAF,GAAb,IAA8BR,mBAAmB,EAAvD;AAEA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAACU,IAAI,CAACG,KAAN,CAAlC;AACA,QAAM,CAACE,IAAD,EAAOC,UAAP,IAAqBhB,QAAQ,CAACU,IAAI,CAACK,IAAN,CAAnC;AAEA,QAAME,OAAO,GAAGhB,UAAU,EAA1B;;AAEA,QAAMiB,cAAc,GAAGC,CAAC,IAAIL,QAAQ,CAACK,CAAC,CAACC,MAAF,CAASC,KAAV,CAApC;;AACA,QAAMC,gBAAgB,GAAGH,CAAC,IAAIH,UAAU,CAACG,CAAC,CAACC,MAAF,CAASC,KAAV,CAAxC;;AAEA,QAAME,iBAAiB,GAAG,YAAY;AACpC,QAAIV,KAAK,IAAIE,IAAb,EAAmB;AACjB,YAAMJ,UAAU,CAAC;AAAEa,QAAAA,EAAE,EAAEjB,MAAN;AAAcM,QAAAA,KAAd;AAAqBE,QAAAA;AAArB,OAAD,CAAhB;AACAE,MAAAA,OAAO,CAACQ,IAAR,CAAc,UAASlB,MAAO,EAA9B;AACD;AACF,GALD;;AAOA,QAAMmB,OAAO,GAAGd,SAAS,gBAAG,QAAC,OAAD;AAAS,IAAA,IAAI,EAAC;AAAd;AAAA;AAAA;AAAA;AAAA,UAAH,GAAkC,IAA3D;AACA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,EAAE,EAAC,WAFL;AAGE,QAAA,IAAI,EAAC,WAHP;AAIE,QAAA,WAAW,EAAC,sBAJd;AAKE,QAAA,KAAK,EAAEC,KALT;AAME,QAAA,QAAQ,EAAEK;AANZ;AAAA;AAAA;AAAA;AAAA,cAFF,eAUE;AAAO,QAAA,OAAO,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVF,eAWE;AACE,QAAA,EAAE,EAAC,aADL;AAEE,QAAA,IAAI,EAAC,aAFP;AAGE,QAAA,KAAK,EAAEH,IAHT;AAIE,QAAA,QAAQ,EAAEO;AAJZ;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAoBE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,OAAO,EAAEC,iBAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YApBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD,CAhDM;;GAAMlB,Y;UAGYF,e,EACaC,mB,EAKpBH,U;;;KATLI,Y","sourcesContent":["import React, { useState } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport { Spinner } from '../../components/Spinner'\r\nimport { useGetPostQuery, useEditPostMutation } from '../api/apiSlice'\r\n\r\n\r\nexport const EditPostForm = ({ match }) => {\r\n  const { postId } = match.params\r\n\r\n  const { data: post } = useGetPostQuery(postId)\r\n  const [updatePost, { isLoading }] = useEditPostMutation()\r\n\r\n  const [title, setTitle] = useState(post.title)\r\n  const [body, setContent] = useState(post.body)\r\n\r\n  const history = useHistory()\r\n\r\n  const onTitleChanged = e => setTitle(e.target.value)\r\n  const onContentChanged = e => setContent(e.target.value)\r\n\r\n  const onSavePostClicked = async () => {\r\n    if (title && body) {\r\n      await updatePost({ id: postId, title, body })\r\n      history.push(`/posts/${postId}`)\r\n    }\r\n  }\r\n\r\n  const spinner = isLoading ? <Spinner text=\"Saving...\" /> : null\r\n  return (\r\n    <section>\r\n      <h2>Edit Post</h2>\r\n      <form>\r\n        <label htmlFor=\"postTitle\">Post Title:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"postTitle\"\r\n          name=\"postTitle\"\r\n          placeholder=\"What's on your mind?\"\r\n          value={title}\r\n          onChange={onTitleChanged}\r\n        />\r\n        <label htmlFor=\"postContent\">Content:</label>\r\n        <textarea\r\n          id=\"postContent\"\r\n          name=\"postContent\"\r\n          value={body}\r\n          onChange={onContentChanged}\r\n        />\r\n      </form>\r\n      <button type=\"button\" onClick={onSavePostClicked}>\r\n        Save Post\r\n      </button>\r\n    </section>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}