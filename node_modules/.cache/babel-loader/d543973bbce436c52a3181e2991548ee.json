{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nexports.__esModule = true;\nexports.Relation = exports.RelationKind = void 0;\n\nvar debug_1 = require(\"debug\");\n\nvar set_1 = __importDefault(require(\"lodash/set\"));\n\nvar get_1 = __importDefault(require(\"lodash/get\"));\n\nvar outvariant_1 = require(\"outvariant\");\n\nvar glossary_1 = require(\"../glossary\");\n\nvar executeQuery_1 = require(\"../query/executeQuery\");\n\nvar definePropertyAtPath_1 = require(\"../utils/definePropertyAtPath\");\n\nvar findPrimaryKey_1 = require(\"../utils/findPrimaryKey\");\n\nvar first_1 = require(\"../utils/first\");\n\nvar log = debug_1.debug('relation');\nvar RelationKind;\n\n(function (RelationKind) {\n  RelationKind[\"OneOf\"] = \"ONE_OF\";\n  RelationKind[\"ManyOf\"] = \"MANY_OF\";\n})(RelationKind = exports.RelationKind || (exports.RelationKind = {}));\n\nvar DEFAULT_RELATION_ATTRIBUTES = {\n  nullable: false,\n  unique: false\n};\n\nvar Relation =\n/** @class */\nfunction () {\n  function Relation(definition) {\n    this.source = null; // These lazy properties are set after calling the \".apply()\" method.\n\n    this.dictionary = null;\n    this.db = null;\n    this.kind = definition.kind;\n    this.attributes = __assign(__assign({}, DEFAULT_RELATION_ATTRIBUTES), definition.attributes || {});\n    this.target = {\n      modelName: definition.to.toString(),\n      // @ts-expect-error Null is an intermediate value.\n      primaryKey: null\n    };\n    log('constructing a \"%s\" relation to \"%s\" with attributes: %o', this.kind, definition.to, this.attributes);\n  }\n  /**\n   * Applies the relation to the given entity.\n   * Creates a connection between the relation's target and source.\n   * Does not define the proxy property getter.\n   */\n\n\n  Relation.prototype.apply = function (entity, propertyPath, dictionary, db) {\n    this.dictionary = dictionary;\n    this.db = db;\n    var sourceModelName = entity[glossary_1.ENTITY_TYPE];\n    var sourcePrimaryKey = entity[glossary_1.PRIMARY_KEY];\n    this.source = {\n      modelName: sourceModelName,\n      propertyPath: propertyPath,\n      primaryKey: sourcePrimaryKey\n    }; // Get the referenced model's primary key name.\n\n    var targetPrimaryKey = findPrimaryKey_1.findPrimaryKey(this.dictionary[this.target.modelName]);\n    outvariant_1.invariant(targetPrimaryKey, 'Failed to create a \"%s\" relation to \"%s\": referenced model does not exist or has no primary key.', this.kind, this.target.modelName);\n    this.target.primaryKey = targetPrimaryKey;\n  };\n  /**\n   * Updates the relation references (values) to resolve the relation with.\n   */\n\n\n  Relation.prototype.resolveWith = function (entity, refs) {\n    var _a, _b;\n\n    var _this = this;\n\n    var _c, _d;\n\n    var exception = function (predicate, reason) {\n      var positionals = [];\n\n      for (var _i = 2; _i < arguments.length; _i++) {\n        positionals[_i - 2] = arguments[_i];\n      }\n\n      outvariant_1.invariant.apply(void 0, __spreadArray([predicate, \"Failed to resolve a \\\"%s\\\" relationship to \\\"%s\\\" at \\\"%s.%s\\\" (%s: \\\"%s\\\"): \" + reason, _this.kind, _this.target.modelName, _this.source.modelName, _this.source.propertyPath, _this.source.primaryKey, entity[_this.source.primaryKey]], __read(positionals)));\n    };\n\n    outvariant_1.invariant(this.source, 'Failed to resolve a \"%s\" relational property to \"%s\": relation has not been applied.', this.kind, this.target.modelName);\n    log('resolving a \"%s\" relational property to \"%s\" on \"%s.%s\" (\"%s\"):', this.kind, this.target.modelName, this.source.modelName, this.source.propertyPath, entity[this.source.primaryKey], refs);\n    log('entity of this relation:', entity); // Support null as the next relation value for nullable relations.\n\n    if (refs === null) {\n      exception(this.attributes.nullable, 'cannot resolve a non-nullable relationship with null.');\n      log('this relation resolves with null'); // Override the relational property of the entity to return null.\n\n      this.setValueResolver(entity, function () {\n        return null;\n      });\n      return;\n    }\n\n    exception(this.target.primaryKey, 'referenced model has no primary key set.');\n    var referencesList = [].concat(refs);\n    var records = this.db.getModel(this.target.modelName);\n    log('records in the referenced model:', records.keys()); // Forbid referencing entities from a model different than the one\n    // defined in the\n\n    referencesList.forEach(function (ref) {\n      var refModelName = ref[glossary_1.ENTITY_TYPE];\n      var refPrimaryKey = ref[glossary_1.PRIMARY_KEY];\n      var refId = ref[_this.target.primaryKey];\n      exception(refModelName, 'expected a referenced entity to be \"%s\" but got %o', _this.target.modelName, ref);\n      exception(refModelName === _this.target.modelName, 'expected a referenced entity to be \"%s\" but got \"%s\" (%s: \"%s\").', _this.target.modelName, refModelName, refPrimaryKey, ref[refPrimaryKey]); // Forbid referencing non-existing entities.\n      // This guards against assigning a compatible plain object\n      // as the relational value.\n\n      exception(records.has(refId), 'referenced entity \"%s\" (%s: \"%s\") does not exist.', refModelName, _this.target.primaryKey, refId);\n    }); // Ensure that unique relations don't reference\n    // entities that are already referenced by other entities.\n\n    if (this.attributes.unique) {\n      log('validating a unique \"%s\" relation to \"%s\" on \"%s.%s\"...', this.kind, this.target.modelName, this.source.modelName, this.source.propertyPath); // Get the list of entities of the same entity type\n      // that reference the same relational values.\n\n      var extraneousEntities = executeQuery_1.executeQuery(this.source.modelName, this.source.primaryKey, {\n        where: set_1[\"default\"]((_a = {}, // Omit the current entity when querying\n        // the list of other entities that reference\n        // the same value.\n        _a[this.source.primaryKey] = {\n          notEquals: entity[this.source.primaryKey]\n        }, _a), this.source.propertyPath, (_b = {}, _b[this.target.primaryKey] = {\n          \"in\": referencesList.map(function (entity) {\n            return entity[_this.target.primaryKey];\n          })\n        }, _b))\n      }, this.db);\n      log('found other %s referencing the same %s:', this.source.modelName, this.target.modelName, extraneousEntities);\n\n      if (extraneousEntities.length > 0) {\n        var extraneousReferences_1 = extraneousEntities.flatMap(function (extraneous) {\n          var references = [].concat(get_1[\"default\"](extraneous, _this.source.propertyPath));\n          return references.map(function (entity) {\n            return entity[_this.target.primaryKey];\n          });\n        });\n        var firstInvalidReference = referencesList.find(function (entity) {\n          return extraneousReferences_1.includes(entity[_this.target.primaryKey]);\n        });\n        exception(false, 'the referenced \"%s\" (%s: \"%s\") belongs to another \"%s\" (%s: \"%s\").', this.target.modelName, this.target.primaryKey, firstInvalidReference === null || firstInvalidReference === void 0 ? void 0 : firstInvalidReference[this.target.primaryKey], this.source.modelName, (_c = extraneousEntities[0]) === null || _c === void 0 ? void 0 : _c[glossary_1.PRIMARY_KEY], (_d = extraneousEntities[0]) === null || _d === void 0 ? void 0 : _d[this.source.primaryKey]);\n      }\n    }\n\n    this.setValueResolver(entity, function () {\n      var queryResult = referencesList.reduce(function (result, ref) {\n        var _a;\n\n        return result.concat(executeQuery_1.executeQuery(_this.target.modelName, _this.target.primaryKey, {\n          where: (_a = {}, _a[_this.target.primaryKey] = {\n            equals: ref[_this.target.primaryKey]\n          }, _a)\n        }, _this.db));\n      }, []);\n      return _this.kind === RelationKind.OneOf ? first_1.first(queryResult) : queryResult;\n    });\n  };\n\n  Relation.prototype.setValueResolver = function (entity, resolver) {\n    var _this = this;\n\n    log('setting value resolver at \"%s\" on: %j', this.source.propertyPath, entity);\n    outvariant_1.invariant(entity[glossary_1.ENTITY_TYPE], 'Failed to set a value resolver on a \"%s\" relationship to \"%s\" at \"%s.%s\": provided object (%j) is not an entity.', this.kind, this.target.modelName, this.source.modelName, this.source.propertyPath.join('.'), entity);\n    definePropertyAtPath_1.definePropertyAtPath(entity, this.source.propertyPath, {\n      // Mark the property as enumerable so it gets listed\n      // when iterating over the entity's properties.\n      enumerable: true,\n      // Mark the property as configurable so it could be re-defined\n      // when updating it during the entity update (\"update\"/\"updateMany\").\n      configurable: true,\n      get: function () {\n        log('GET \"%s.%s\" on \"%s\" (\"%s\")', _this.source.modelName, _this.source.propertyPath, _this.source.modelName, entity[_this.source.primaryKey], _this);\n        var nextValue = resolver();\n        log('resolved \"%s\" relation at \"%s.%s\" (\"%s\") to:', _this.kind, _this.source.modelName, _this.source.propertyPath, entity[_this.source.primaryKey], nextValue);\n        return nextValue;\n      }\n    });\n  };\n\n  return Relation;\n}();\n\nexports.Relation = Relation;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/Nodric/finnal/node_modules/@mswjs/data/lib/relations/Relation.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__read","o","m","Symbol","iterator","r","ar","e","next","done","push","value","error","__spreadArray","to","from","il","j","__importDefault","mod","__esModule","exports","Relation","RelationKind","debug_1","require","set_1","get_1","outvariant_1","glossary_1","executeQuery_1","definePropertyAtPath_1","findPrimaryKey_1","first_1","log","debug","DEFAULT_RELATION_ATTRIBUTES","nullable","unique","definition","source","dictionary","db","kind","attributes","target","modelName","toString","primaryKey","entity","propertyPath","sourceModelName","ENTITY_TYPE","sourcePrimaryKey","PRIMARY_KEY","targetPrimaryKey","findPrimaryKey","invariant","resolveWith","refs","_a","_b","_this","_c","_d","exception","predicate","reason","positionals","_i","setValueResolver","referencesList","concat","records","getModel","keys","forEach","ref","refModelName","refPrimaryKey","refId","has","extraneousEntities","executeQuery","where","notEquals","map","extraneousReferences_1","flatMap","extraneous","references","firstInvalidReference","find","includes","queryResult","reduce","result","equals","OneOf","first","resolver","join","definePropertyAtPath","enumerable","configurable","get","nextValue"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nexports.__esModule = true;\nexports.Relation = exports.RelationKind = void 0;\nvar debug_1 = require(\"debug\");\nvar set_1 = __importDefault(require(\"lodash/set\"));\nvar get_1 = __importDefault(require(\"lodash/get\"));\nvar outvariant_1 = require(\"outvariant\");\nvar glossary_1 = require(\"../glossary\");\nvar executeQuery_1 = require(\"../query/executeQuery\");\nvar definePropertyAtPath_1 = require(\"../utils/definePropertyAtPath\");\nvar findPrimaryKey_1 = require(\"../utils/findPrimaryKey\");\nvar first_1 = require(\"../utils/first\");\nvar log = debug_1.debug('relation');\nvar RelationKind;\n(function (RelationKind) {\n    RelationKind[\"OneOf\"] = \"ONE_OF\";\n    RelationKind[\"ManyOf\"] = \"MANY_OF\";\n})(RelationKind = exports.RelationKind || (exports.RelationKind = {}));\nvar DEFAULT_RELATION_ATTRIBUTES = {\n    nullable: false,\n    unique: false\n};\nvar Relation = /** @class */ (function () {\n    function Relation(definition) {\n        this.source = null;\n        // These lazy properties are set after calling the \".apply()\" method.\n        this.dictionary = null;\n        this.db = null;\n        this.kind = definition.kind;\n        this.attributes = __assign(__assign({}, DEFAULT_RELATION_ATTRIBUTES), (definition.attributes || {}));\n        this.target = {\n            modelName: definition.to.toString(),\n            // @ts-expect-error Null is an intermediate value.\n            primaryKey: null\n        };\n        log('constructing a \"%s\" relation to \"%s\" with attributes: %o', this.kind, definition.to, this.attributes);\n    }\n    /**\n     * Applies the relation to the given entity.\n     * Creates a connection between the relation's target and source.\n     * Does not define the proxy property getter.\n     */\n    Relation.prototype.apply = function (entity, propertyPath, dictionary, db) {\n        this.dictionary = dictionary;\n        this.db = db;\n        var sourceModelName = entity[glossary_1.ENTITY_TYPE];\n        var sourcePrimaryKey = entity[glossary_1.PRIMARY_KEY];\n        this.source = {\n            modelName: sourceModelName,\n            propertyPath: propertyPath,\n            primaryKey: sourcePrimaryKey\n        };\n        // Get the referenced model's primary key name.\n        var targetPrimaryKey = findPrimaryKey_1.findPrimaryKey(this.dictionary[this.target.modelName]);\n        outvariant_1.invariant(targetPrimaryKey, 'Failed to create a \"%s\" relation to \"%s\": referenced model does not exist or has no primary key.', this.kind, this.target.modelName);\n        this.target.primaryKey = targetPrimaryKey;\n    };\n    /**\n     * Updates the relation references (values) to resolve the relation with.\n     */\n    Relation.prototype.resolveWith = function (entity, refs) {\n        var _a, _b;\n        var _this = this;\n        var _c, _d;\n        var exception = function (predicate, reason) {\n            var positionals = [];\n            for (var _i = 2; _i < arguments.length; _i++) {\n                positionals[_i - 2] = arguments[_i];\n            }\n            outvariant_1.invariant.apply(void 0, __spreadArray([predicate, \"Failed to resolve a \\\"%s\\\" relationship to \\\"%s\\\" at \\\"%s.%s\\\" (%s: \\\"%s\\\"): \" + reason, _this.kind,\n                _this.target.modelName,\n                _this.source.modelName,\n                _this.source.propertyPath,\n                _this.source.primaryKey,\n                entity[_this.source.primaryKey]], __read(positionals)));\n        };\n        outvariant_1.invariant(this.source, 'Failed to resolve a \"%s\" relational property to \"%s\": relation has not been applied.', this.kind, this.target.modelName);\n        log('resolving a \"%s\" relational property to \"%s\" on \"%s.%s\" (\"%s\"):', this.kind, this.target.modelName, this.source.modelName, this.source.propertyPath, entity[this.source.primaryKey], refs);\n        log('entity of this relation:', entity);\n        // Support null as the next relation value for nullable relations.\n        if (refs === null) {\n            exception(this.attributes.nullable, 'cannot resolve a non-nullable relationship with null.');\n            log('this relation resolves with null');\n            // Override the relational property of the entity to return null.\n            this.setValueResolver(entity, function () {\n                return null;\n            });\n            return;\n        }\n        exception(this.target.primaryKey, 'referenced model has no primary key set.');\n        var referencesList = [].concat(refs);\n        var records = this.db.getModel(this.target.modelName);\n        log('records in the referenced model:', records.keys());\n        // Forbid referencing entities from a model different than the one\n        // defined in the\n        referencesList.forEach(function (ref) {\n            var refModelName = ref[glossary_1.ENTITY_TYPE];\n            var refPrimaryKey = ref[glossary_1.PRIMARY_KEY];\n            var refId = ref[_this.target.primaryKey];\n            exception(refModelName, 'expected a referenced entity to be \"%s\" but got %o', _this.target.modelName, ref);\n            exception(refModelName === _this.target.modelName, 'expected a referenced entity to be \"%s\" but got \"%s\" (%s: \"%s\").', _this.target.modelName, refModelName, refPrimaryKey, ref[refPrimaryKey]);\n            // Forbid referencing non-existing entities.\n            // This guards against assigning a compatible plain object\n            // as the relational value.\n            exception(records.has(refId), 'referenced entity \"%s\" (%s: \"%s\") does not exist.', refModelName, _this.target.primaryKey, refId);\n        });\n        // Ensure that unique relations don't reference\n        // entities that are already referenced by other entities.\n        if (this.attributes.unique) {\n            log('validating a unique \"%s\" relation to \"%s\" on \"%s.%s\"...', this.kind, this.target.modelName, this.source.modelName, this.source.propertyPath);\n            // Get the list of entities of the same entity type\n            // that reference the same relational values.\n            var extraneousEntities = executeQuery_1.executeQuery(this.source.modelName, this.source.primaryKey, {\n                where: set_1[\"default\"]((_a = {},\n                    // Omit the current entity when querying\n                    // the list of other entities that reference\n                    // the same value.\n                    _a[this.source.primaryKey] = {\n                        notEquals: entity[this.source.primaryKey]\n                    },\n                    _a), this.source.propertyPath, (_b = {},\n                    _b[this.target.primaryKey] = {\n                        \"in\": referencesList.map(function (entity) {\n                            return entity[_this.target.primaryKey];\n                        })\n                    },\n                    _b))\n            }, this.db);\n            log('found other %s referencing the same %s:', this.source.modelName, this.target.modelName, extraneousEntities);\n            if (extraneousEntities.length > 0) {\n                var extraneousReferences_1 = extraneousEntities.flatMap(function (extraneous) {\n                    var references = [].concat(get_1[\"default\"](extraneous, _this.source.propertyPath));\n                    return references.map(function (entity) { return entity[_this.target.primaryKey]; });\n                });\n                var firstInvalidReference = referencesList.find(function (entity) {\n                    return extraneousReferences_1.includes(entity[_this.target.primaryKey]);\n                });\n                exception(false, 'the referenced \"%s\" (%s: \"%s\") belongs to another \"%s\" (%s: \"%s\").', this.target.modelName, this.target.primaryKey, firstInvalidReference === null || firstInvalidReference === void 0 ? void 0 : firstInvalidReference[this.target.primaryKey], this.source.modelName, (_c = extraneousEntities[0]) === null || _c === void 0 ? void 0 : _c[glossary_1.PRIMARY_KEY], (_d = extraneousEntities[0]) === null || _d === void 0 ? void 0 : _d[this.source.primaryKey]);\n            }\n        }\n        this.setValueResolver(entity, function () {\n            var queryResult = referencesList.reduce(function (result, ref) {\n                var _a;\n                return result.concat(executeQuery_1.executeQuery(_this.target.modelName, _this.target.primaryKey, {\n                    where: (_a = {},\n                        _a[_this.target.primaryKey] = {\n                            equals: ref[_this.target.primaryKey]\n                        },\n                        _a)\n                }, _this.db));\n            }, []);\n            return _this.kind === RelationKind.OneOf ? first_1.first(queryResult) : queryResult;\n        });\n    };\n    Relation.prototype.setValueResolver = function (entity, resolver) {\n        var _this = this;\n        log('setting value resolver at \"%s\" on: %j', this.source.propertyPath, entity);\n        outvariant_1.invariant(entity[glossary_1.ENTITY_TYPE], 'Failed to set a value resolver on a \"%s\" relationship to \"%s\" at \"%s.%s\": provided object (%j) is not an entity.', this.kind, this.target.modelName, this.source.modelName, this.source.propertyPath.join('.'), entity);\n        definePropertyAtPath_1.definePropertyAtPath(entity, this.source.propertyPath, {\n            // Mark the property as enumerable so it gets listed\n            // when iterating over the entity's properties.\n            enumerable: true,\n            // Mark the property as configurable so it could be re-defined\n            // when updating it during the entity update (\"update\"/\"updateMany\").\n            configurable: true,\n            get: function () {\n                log('GET \"%s.%s\" on \"%s\" (\"%s\")', _this.source.modelName, _this.source.propertyPath, _this.source.modelName, entity[_this.source.primaryKey], _this);\n                var nextValue = resolver();\n                log('resolved \"%s\" relation at \"%s.%s\" (\"%s\") to:', _this.kind, _this.source.modelName, _this.source.propertyPath, entity[_this.source.primaryKey], nextValue);\n                return nextValue;\n            }\n        });\n    };\n    return Relation;\n}());\nexports.Relation = Relation;\n"]},"metadata":{},"sourceType":"script"}