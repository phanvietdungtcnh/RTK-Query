{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\Practice_ReactJS\\\\RTK_Query\\\\src\\\\features\\\\posts\\\\SinglePostPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { selectPostById } from './postsSlice';\nimport { Spinner } from '../../components/Spinner';\nimport { useGetPostQuery, useGetCommentsQuery } from '../api/apiSlice';\nimport { PostAuthor } from './PostAuthor';\nimport { TimeAgo } from './TimeAgo'; //import { ReactionButtons } from './ReactionButtons'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SinglePostPage = _ref => {\n  _s();\n\n  let {\n    match\n  } = _ref;\n  const {\n    postId\n  } = match.params;\n  const {\n    data: post,\n    isFetching,\n    isSuccess\n  } = useGetPostQuery(postId);\n  const {\n    data: listComments\n  } = useGetCommentsQuery(undefined, {\n    selectFromResult: result => {\n      return { ...result\n      };\n    }\n  });\n  const CommentById = useMemo(() => listComments === null || listComments === void 0 ? void 0 : listComments.filter(_ref2 => {\n    let {\n      postId: commentId\n    } = _ref2;\n    return commentId === Number(postId);\n  }, [listComments, postId]));\n  const commentName = CommentById === null || CommentById === void 0 ? void 0 : CommentById.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"item-comments\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: comment === null || comment === void 0 ? void 0 : comment.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: comment === null || comment === void 0 ? void 0 : comment.email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: comment === null || comment === void 0 ? void 0 : comment.body\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 11\n    }, this)]\n  }, comment === null || comment === void 0 ? void 0 : comment.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this));\n  let content;\n\n  if (isFetching) {\n    content = /*#__PURE__*/_jsxDEV(Spinner, {\n      text: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 19\n    }, this);\n  } else if (isSuccess) {\n    content = /*#__PURE__*/_jsxDEV(\"article\", {\n      className: \"post\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(PostAuthor, {\n          userId: post.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TimeAgo, {\n          timestamp: post.date\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"post-content\",\n        children: post.body\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: `/editPost/${post.id}`,\n        className: \"button\",\n        children: \"Edit Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Comments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), commentName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SinglePostPage, \"LoGYmaghJhgefICnLej6WtaxkeE=\", false, function () {\n  return [useGetPostQuery, useGetCommentsQuery];\n});\n\n_c = SinglePostPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"SinglePostPage\");","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/Practice_ReactJS/RTK_Query/src/features/posts/SinglePostPage.js"],"names":["React","useMemo","useSelector","Link","selectPostById","Spinner","useGetPostQuery","useGetCommentsQuery","PostAuthor","TimeAgo","SinglePostPage","match","postId","params","data","post","isFetching","isSuccess","listComments","undefined","selectFromResult","result","CommentById","filter","commentId","Number","commentName","map","comment","name","email","body","id","content","title","date"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { selectPostById } from './postsSlice'\r\n\r\nimport { Spinner } from '../../components/Spinner'\r\nimport { useGetPostQuery, useGetCommentsQuery } from '../api/apiSlice'\r\n\r\nimport { PostAuthor } from './PostAuthor'\r\nimport { TimeAgo } from './TimeAgo'\r\n//import { ReactionButtons } from './ReactionButtons'\r\n\r\nexport const SinglePostPage = ({ match }) => {\r\n    const { postId } = match.params\r\n\r\n    const { data: post, isFetching, isSuccess } = useGetPostQuery(postId)\r\n\r\n    const { data: listComments } = useGetCommentsQuery(undefined, {\r\n        selectFromResult: result => {\r\n          return ({\r\n            ...result,\r\n          })\r\n        } \r\n    })\r\n\r\n    const CommentById = useMemo(() => listComments?.filter(({postId: commentId}) => commentId === Number(postId), [listComments, postId]))\r\n\r\n    const commentName = CommentById?.map(comment => (\r\n        <div key={comment?.id} className=\"item-comments\">\r\n          <h2>{comment?.name}</h2>\r\n          <p>{comment?.email}</p>\r\n          <p>{comment?.body}</p>\r\n        </div>\r\n    ))\r\n    \r\n    let content\r\n    if (isFetching) {\r\n        content = <Spinner text=\"Loading...\" />\r\n    } else if (isSuccess) {\r\n        content = (\r\n        <article className=\"post\">\r\n            <h2>{post.title}</h2>\r\n            <div>\r\n            <PostAuthor userId={post.id} />\r\n            <TimeAgo timestamp={post.date} />\r\n            </div>\r\n            <p className=\"post-content\">{post.body}</p>\r\n         \r\n            <Link to={`/editPost/${post.id}`} className=\"button\">\r\n            Edit Post\r\n            </Link>\r\n        </article>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <div>\r\n                {content}\r\n            </div>\r\n            <div className=\"comments\">\r\n                <h3>Comments</h3>\r\n                {commentName}\r\n            </div>\r\n        </section>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}